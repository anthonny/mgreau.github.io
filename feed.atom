<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>http://mgreau.github.io/</id>
  <title>mgreau Blog</title>
  <author>
    <name>Maxime Gréau</name>
  </author>
  <updated>2013-11-10T12:16:32+01:00</updated>
  <link href="http://mgreau.github.io/feed.atom" rel="self" type="application/atom+xml" />
  <link href="http://mgreau.github.io/" rel="alternate" type="text/html" />
  <entry>
    <id>http://mgreau.github.io/posts/2013/11/11/javaee7-websocket-angularjs-wildfly.html</id>
    <title>Java EE 7 and WebSocket API for Java (JSR 356) with AngularJS on WildFly</title>
    <updated>2013-11-10T12:16:32+01:00</updated>
    <published>2013-11-11T00:00:00+00:00</published>
    <link href="http://mgreau.github.io/posts/2013/11/11/javaee7-websocket-angularjs-wildfly.html" rel="alternate" type="text/html" />
    <author>
      <name>Maxime Greau</name>
    </author>
    <summary>
      
      
      
      
      
      
      
      
      
      Overview
      
      This blog post describes the Java API for WebSocket Protocol (JSR 356) (which is one of four newest JSRs for the Java EE 7 platform) and provides a concrete application deployed on WildFly 8 and available online on OpenShift.
      
      
      
      
      [FR] La version française (HTML ou PDF) de ce post est basée uniquement sur la démonstration avec l&#8217;API Javascript sans AngularJS.
      
      
      
      
      
      
      
      
      Once you will have read this post, you will be able to understand Arun Gupta's definition about what is it possible to do with WebSocket technology.
      
      
      
      "WebSocket gives you bidirectionnal, full duplex, communication channel over a single TCP."&#10;-- Arun Gupta (Java EE Evangelist...
    </summary>
    <content type="html">
      &lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Overview&lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This blog post describes the &lt;strong&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=356&quot;&gt;Java API for WebSocket Protocol (JSR 356)&lt;/a&gt;&lt;/strong&gt; (which is one of four newest JSRs for the &lt;strong&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=342&quot;&gt;Java EE 7&lt;/a&gt;&lt;/strong&gt; platform) and provides a concrete application deployed on &lt;a href=&quot;http://wildfly.org&quot;&gt;WildFly 8&lt;/a&gt; and &lt;a href=&quot;http://wildfly-mgreau.rhcloud.com/usopen/live.html&quot;&gt;available online on OpenShift&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;[FR] La version française (&lt;a href=&quot;http://mgreau.com/posts/2013/09/27/javaee7-api-websocket-html5.html&quot;&gt;HTML&lt;/a&gt; ou &lt;a href=&quot;http://mgreau.com/doc/javaee7-api-websocket-html5.pdf&quot;&gt;PDF&lt;/a&gt;) de ce post est basée uniquement sur la démonstration avec l’API Javascript sans AngularJS.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you will have read this post, you will be able to understand &lt;a href=&quot;https://twitter.com/arungupta&quot;&gt;Arun Gupta&lt;/a&gt;'s definition about what is it possible to do with WebSocket technology.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;&quot;WebSocket gives you bidirectionnal, full duplex, communication channel over a single TCP.&quot;
      -- Arun Gupta (Java EE Evangelist chez Oracle) - Devoxx UK 2013&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;pass::[more]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
      &lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
      &lt;ul class=&quot;sectlevel1&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#java-ee-7-overview&quot;&gt;Java EE 7 overview&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#demo-angularjs-html5-jsr-356-api-application-deployed-on-wildfly-8-openshift&quot;&gt;DEMO : AngularJS - HTML5 / JSR-356 API application deployed on WildFly 8 (OpenShift)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#websocket-ws-a-new-protocol-different-from-http&quot;&gt;WebSocket (WS) : a new protocol different from HTTP&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;
      &lt;ul class=&quot;sectlevel2&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#opening-handshake&quot;&gt;Opening Handshake&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#data-transfer&quot;&gt;Data transfer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#closing-handshake&quot;&gt;Closing Handshake&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#websocket-javascript-api-client&quot;&gt;WebSocket Javascript API (Client)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jsr-386-java-api-for-websocket-protocol&quot;&gt;JSR 386 : Java API for WebSocket protocol&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;
      &lt;ul class=&quot;sectlevel2&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#websocket-server-endpoint&quot;&gt;WebSocket Server Endpoint&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#annotations&quot;&gt;Annotations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#encoders-and-decoders&quot;&gt;Encoders and Decoders&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#websocket-client-endpoint&quot;&gt;WebSocket Client Endpoint&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#us-open-application&quot;&gt;US OPEN Application&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;
      &lt;ul class=&quot;sectlevel2&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#maven-dependencies-for-java-ee-7-api&quot;&gt;Maven dependencies for Java EE 7 API&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#add-server-endpoint&quot;&gt;Add Server Endpoint&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#encodes-and-decodes-messages&quot;&gt;Encodes and Decodes messages&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#html5-web-client-single-match-index-html&quot;&gt;HTML5 Web Client (single match - index.html)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#angularjs-client-several-matches-live-html&quot;&gt;AngularJS Client (several matches - live.html)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#source-code-on-github&quot;&gt;Source code on Github&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#build-and-deploy-the-war&quot;&gt;Build and Deploy the WAR&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#benchmark-websocket-vs-rest&quot;&gt;Benchmark : WebSocket VS REST&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#references-about-websocket&quot;&gt;References about WebSocket&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;java-ee-7-overview&quot;&gt;Java EE 7 overview&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;strong&gt;Java Platform Enterprise Edition&lt;/strong&gt; was released in Version 7 (Java EE 7) in &lt;strong&gt;June 2013&lt;/strong&gt;.
      In line with the two previous versions (Java EE 5 and Java EE 6) &lt;strong&gt;Java EE 7&lt;/strong&gt; always proposes to simplify the work of the developer.
      This version decorates previous versions with 3 main objectives :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;embraces &lt;strong&gt;HTML5&lt;/strong&gt; (WebSocket API, JSON-P API, JAX-RS)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;provide an &lt;strong&gt;even better productivity&lt;/strong&gt; to developer (JMS)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;meeting &lt;strong&gt;enterprise demands&lt;/strong&gt; (Batch API, Concurrency Utilities)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div id=&quot;javaee7_intro&quot; class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://mgreau.github.io/images/posts/javaee7_intro.png&quot; alt=&quot;Java EE 7 goals&quot;&gt;
      &lt;/div&gt;
      &lt;div class=&quot;title&quot;&gt;Figure 1. The 3 goals of Java EE 7&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Java Platform, Entreprise Edition 7 (JSR 342) can be summmed up around :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;4 newest specifications : &lt;strong&gt;&lt;code&gt;Java API for WebSocket 1.0&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;Java API for JSON Processing 1.0&lt;/code&gt;&lt;/strong&gt; , &lt;strong&gt;&lt;code&gt;Batch Applications 1.0&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;Concurrency Utilities for Java EE 1.0&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;3 specifications with major updates : &lt;strong&gt;&lt;code&gt;JMS 2.0&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;JAX-RS 2.0&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;EL 3.0&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;and 6 specifications with minor updates : &lt;strong&gt;&lt;code&gt;JPA 2.1&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;Servlet 3.1&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;EJB 3.2&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;CDI 1.1&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;JSF 2.2&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;Bean Validation 1.1&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;demo-angularjs-html5-jsr-356-api-application-deployed-on-wildfly-8-openshift&quot;&gt;DEMO : AngularJS - HTML5 / JSR-356 API application deployed on WildFly 8 (OpenShift)&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you want to see right away what it looks like, you can access &lt;code&gt;&lt;a href=&quot;http://wildfly-mgreau.rhcloud.com/usopen/live.html&quot;&gt;the online application&lt;/a&gt;&lt;/code&gt; whose code will be in part explained in this article.
      It’s an application that give you the ability :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;to watch one or several tennis matches in &lt;strong&gt;live mode&lt;/strong&gt; (Quarter Final U.S. Open 2013)&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;click on each match that you want to access live&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;click on exit button to disconnect from a specific match&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;to bet on the winner of the match&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;each time a user bet on the same match, the counter is incremented&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;at this end of the match, you will see the result of your bet&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You will say: &lt;em&gt;&quot;Nothing special !&quot;&lt;/em&gt;, and you’re right :)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;At first glance, it sounds like something already seen in many of today’s applications, but it’s the technique used behind which does matter because, as you will see below, everything is based around the &lt;strong&gt;standard of the new WebSocket protocol (ws:// ou wss://)&lt;/strong&gt; and not on &quot;HTTP hacking&quot;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;The technologies used for the development of this application are :&lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Frontend : &lt;code&gt;HTML5&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;Javascript (WebSocket API)&lt;/code&gt; with &lt;em&gt;Bootstrap CSS and &lt;code&gt;AngularJS&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Backend : &lt;code&gt;Java API for WebSocket&lt;/code&gt;, &lt;code&gt;EJB&lt;/code&gt;, &lt;code&gt;JSON-P&lt;/code&gt;, &lt;code&gt;JAX-RS&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div id=&quot;websocket_example&quot; class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;a class=&quot;image&quot; href=&quot;http://wildfly-mgreau.rhcloud.com/usopen/live.html&quot;&gt;&lt;img src=&quot;http://mgreau.github.io/images/posts/websocket_wildfly_angularjs_tennis.png&quot; alt=&quot;Implementation of WebSocket (Java API et Javascript API)&quot;&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class=&quot;title&quot;&gt;Figure 2. US Open Application  - Implementation of WebSocket (Java API et Javascript API)&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Nope! This demonstration is &lt;strong&gt;not a chat application :)&lt;/strong&gt;
      It’s obvious that the &quot;chat demo&quot; is the one that first comes to mind to illustrate the use of WebSocket technology. However, there are many other use cases, such as collaborative work on a text document online or online games like chess presented at the &lt;a href=&quot;https://blogs.oracle.com/javaone/entry/the_javaone_2013_technical_keynote&quot;&gt;JavaOne 2013 keynote&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;This application is available on the Cloud thanks to &lt;a href=&quot;https://www.openshift.com/&quot;&gt;OpenShift&lt;/a&gt;, the cloud computing PaaS product by RedHat. It’s deployed on WildFly 8.0.0-Beta1 (normaly certified Java EE 7 to the end of 2013). To set up an application server like WildFly on OpenShit, you just need to read &lt;a href=&quot;https://www.openshift.com/blogs/deploy-websocket-web-applications-with-jboss-wildfly&quot;&gt;this Shekhar Gulati’s blog post&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;websocket-ws-a-new-protocol-different-from-http&quot;&gt;WebSocket (WS) : a new protocol different from HTTP&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc2616&quot;&gt;HTTP&lt;/a&gt; is the standard protocol for the Web, it’s very effective for a lot of use cases but, nevertheless, has &lt;strong&gt;some drawbacks&lt;/strong&gt; in the case of &lt;strong&gt;interactive Web applications&lt;/strong&gt; :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;half-duplex&lt;/strong&gt; : based on the request/response pattern, the client sends a request and the server performs processing before sending a response, the client is forced to wait for a server response&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;verbose&lt;/strong&gt; : a lot of information are send in HTTP headers associated with the message, both in the HTTP request and in the HTTP response&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;in order to add a &lt;strong&gt;server push&lt;/strong&gt; mode, you need to use workaround (polling, long polling, Comet/Ajax) since there is no standard&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This protocol is not optimized to scale on large applications that have significant needs of real-time bi-directional communication. This is why the &lt;strong&gt;new WebSocket protocol&lt;/strong&gt; offers more advanced features than HTTP because it is:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;based on &lt;strong&gt;&lt;code&gt;1 unique TCP connection between 2 peers&lt;/code&gt;&lt;/strong&gt; (whereas each HTTP request/response needs a new TCP connection)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;&lt;code&gt;bidirectionnal&lt;/code&gt;&lt;/strong&gt; : client can send message to server and server can also send message to client&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;&lt;code&gt;full-duplex&lt;/code&gt;&lt;/strong&gt; : client can send multiple messages to server, as well as server to client without waiting for a response from each other&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock warning&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;The term &lt;strong&gt;client&lt;/strong&gt; is used only to define the one that initiate the connection. Once the connection is established, client and server become both &lt;strong&gt;peers&lt;/strong&gt;, with the same capacity.&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The WebSocket protocol was originally intended to be part of the HTML5 specification but as HTML5 will be officially released in 2014, the WebSocket protocol is finally set, as well as HTTP protocol, by an IETF specification, &lt;a href=&quot;http://tools.ietf.org/html/rfc6455&quot;&gt;with RFC 6455&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As shown in the diagram below, the &lt;strong&gt;WebSocket protocol works in two phases&lt;/strong&gt; named :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;&lt;code&gt;handshake&lt;/code&gt; (open and close)&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;&lt;code&gt;data transfer&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div id=&quot;websocket_protocol&quot; class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://mgreau.github.io/images/posts/WebSocket_Protocol.png&quot; alt=&quot;Diagram which explain how does the WebSocket protocol work&quot; width=&quot;550&quot;&gt;
      &lt;/div&gt;
      &lt;div class=&quot;title&quot;&gt;Figure 3. How does the WebSocket protocol work&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;opening-handshake&quot;&gt;Opening Handshake&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;strong&gt;Opening Handshake&lt;/strong&gt; phase is a &lt;strong&gt;unique HTTP request/response&lt;/strong&gt; between the one who initiate the connection (peer client) and the peer server. This HTTP exchange is specific because it uses the concept of &lt;a href=&quot;http://tools.ietf.org/html/rfc2616#section-14.42&quot;&gt;&lt;strong&gt;Upgrade, defined in the HTTP specification&lt;/strong&gt;&lt;/a&gt;.
      The principle is simple : &lt;strong&gt;Upgrade HTTP&lt;/strong&gt; allows the client to ask the server to change the communication protocol and thus ensure that the client and server can discuss using a protocol other than HTTP.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg1-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 1. HTTP Handshake sample request&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;GET /usopen/matches/1234 HTTP/1.1     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      Host: wildfly-mgreau.rhcloud.com:8000  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      Upgrade: websocket  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      Connection: Upgrade &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
      Origin: http://wildfly-mgreau.rhcloud.com
      Sec-WebSocket-Key:0EK7XmpTZL341oOh7x1cDw==
      Sec-WebSocket-Version:13&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;colist arabic&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;HTTP GET method and HTTP 1.1 version required&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Host used for the WebSocket connection&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Request to upgrade to the WebSocket protocol&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Request to upgrade from HTTP to another protocol&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg2-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 2. HTTP Handshake Response sample&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;HTTP/1.1 101 Switching Protocols &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      Connection:Upgrade
      Sec-WebSocket-Accept:SuQ5/hh0kStSr6oIzDG6gRfTx2I=
      Upgrade:websocket &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;colist arabic&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;HTTP Response Code 101 : server is compatible and accept to send messages through another protocol&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Upgrade to the WebSocket protocol is accepted&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock important&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;When the upgrade request from HTTP to WebSocket protocol is approved by the endpoint server, it’s no longer possible to use HTTP communication, all exchanges have to be made through the WebSocket protocol.&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;data-transfer&quot;&gt;Data transfer&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once the &lt;strong&gt;handshake&lt;/strong&gt; is approved, the use of WebSocket protocol is established. There are an open connection on the &lt;em&gt;peer server side&lt;/em&gt; as well on the &lt;em&gt;peer client side&lt;/em&gt;, callback handlers are called to initiate the communication.&lt;br&gt;
      The &lt;strong&gt;Data transfer&lt;/strong&gt; can now begin, so the 2 peers can exchange messages in a bidirectionnal and full-duplex communication.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As shown in the diagram named &lt;strong&gt;Figure 3&lt;/strong&gt;, the &lt;code&gt;peer server&lt;/code&gt; can send multiple messages (&lt;em&gt;in this example : 1 message for each scored point, 1 message each time any user bet on this game and 1 message at the end of the match&lt;/em&gt;) without any &lt;code&gt;peer client&lt;/code&gt; response and the peer client can also send messages at any time (&lt;em&gt;in this example : betting on the winner of the match&lt;/em&gt;).
      Each peer can send a specific message to close the connection.&lt;br&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;With Java EE7 Platform, the &lt;code&gt;peer server side&lt;/code&gt; code is written in &lt;strong&gt;Java&lt;/strong&gt; while the &lt;code&gt;peer client side&lt;/code&gt; code is in &lt;strong&gt;Java or Javascript&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;closing-handshake&quot;&gt;Closing Handshake&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This phase &lt;strong&gt;can be initiated by both peer&lt;/strong&gt;. A peer that want to close the communication need to send a &lt;strong&gt;close control frame&lt;/strong&gt; and it will received a close control frame too as a response.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;websocket-javascript-api-client&quot;&gt;WebSocket Javascript API (Client)&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To communicate from a Web application with a server using the WebSocket protocol, it’s necessary to use a &lt;strong&gt;client Javascript API&lt;/strong&gt;. It’s the role of W3C to define this API.
      The W3C specification for the &lt;a href=&quot;http://w3.org/TR/websockets/&quot;&gt;JavaScript WebSocket API&lt;/a&gt; is being finalized. &lt;a href=&quot;http://www.w3.org/TR/websockets/#websocket&quot;&gt;The WebSocket interface&lt;/a&gt; provides, among others, the following:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;an attribute to define the connection URL to the server Endpoint (&lt;code&gt;url&lt;/code&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;an attribute to know the status of the connection (&lt;code&gt;readyState&lt;/code&gt; : CONNECTING, OPEN, CLOSING, CLOSED)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;some &lt;strong&gt;Event Handler&lt;/strong&gt; in connection with the WebSocket lifecycle, eg :&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;the Event Handler &lt;code&gt;onopen&lt;/code&gt; is called when a new connection is open&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the Event Handler &lt;code&gt;onerror&lt;/code&gt; is called when an error occured during the communication&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the Event Handler &lt;code&gt;onmessage&lt;/code&gt; is called when a message arrives from the server&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;methods (&lt;code&gt;send(DOMString data)&lt;/code&gt;, &lt;code&gt;send(Blob data)&lt;/code&gt;) with which it’s possible to send different type of flow(text, binary) to the Endpoint server&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg3-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 3. Javascript source code example, from &lt;a href=&quot;http://websocket.org&quot;&gt;http://websocket.org&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;javascript language-javascript&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;var&lt;/span&gt; wsUri = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ws://echo.websocket.org/&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
      
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;testWebSocket&lt;/span&gt;() {
      
              websocket = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; WebSocket(wsUri);
              websocket.&lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onopen&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(evt) { onOpen(evt) };
              websocket.&lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onclose&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(evt) { onClose(evt) };
              websocket.&lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onmessage&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(evt) { onMessage(evt) };
              websocket.&lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onerror&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(evt) { onError(evt) }; }
      }
      
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onOpen&lt;/span&gt;(evt) {
              writeToScreen(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;CONNECTED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
              doSend(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;WebSocket rocks&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
      }
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onClose&lt;/span&gt;(evt) {
              writeToScreen(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;DISCONNECTED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
      }
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onMessage&lt;/span&gt;(evt) {
              writeToScreen(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;&amp;lt;span style=&quot;color: blue;&quot;&amp;gt;RESPONSE: &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + evt.data+&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
              websocket.close();
      }
      
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onError&lt;/span&gt;(evt) {
              writeToScreen(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;&amp;lt;span style=&quot;color: red;&quot;&amp;gt;ERROR:&amp;lt;/span&amp;gt; &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + evt.data);
      }
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;doSend&lt;/span&gt;(message) {
              writeToScreen(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SENT: &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + message);
              websocket.send(message);
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;jsr-386-java-api-for-websocket-protocol&quot;&gt;JSR 386 : Java API for WebSocket protocol&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As the W3C defines how to use WebSocket in Javascript, the &lt;strong&gt;Java Communitee Process (JCP)&lt;/strong&gt; does the same for the Java world via the JSR 386.&lt;br&gt;
      JSR 356 defines a &lt;a href=&quot;http://jcp.org/en/jsr/detail?id=356&quot;&gt;Java API for WebSocket protocol&lt;/a&gt; which be part of &lt;strong&gt;Java EE Web Profile&lt;/strong&gt; and give the ability to :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;create a &lt;code&gt;&lt;strong&gt;WebSocket Endpoint&lt;/strong&gt;&lt;/code&gt; (server or client), the name given to the Java component that can communicate via the WebSocket protocol&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the choice of &lt;strong&gt;annotation&lt;/strong&gt; or programmatic approach&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;send and consume messages&lt;/strong&gt; controls, text or binary via this protocol&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;manage the message as a complete message or a sequence of partial messages&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;send or receive messages as Java objects (concept of &lt;strong&gt;encoders / decoders&lt;/strong&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;send messages &lt;strong&gt;synchronously or asynchronously&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;configure and manage &lt;strong&gt;WebSocket Session&lt;/strong&gt; (timeout, cookies…)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;em&gt;The open source JSR-356 RI (Reference Implementation) is &lt;a href=&quot;https://tyrus.java.net/&quot;&gt;the project Tyrus&lt;/a&gt;&lt;/em&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;websocket-server-endpoint&quot;&gt;WebSocket Server Endpoint&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The transformation of a Plain Old Java Object (POJO) to a &lt;strong&gt;Server WebSocket Endpoint&lt;/strong&gt; (namely capable of handling requests from different customers on the same URI) is &lt;strong&gt;very easy&lt;/strong&gt; since you only have to annotate the Java Class with &lt;strong&gt;@ServerEndpoint&lt;/strong&gt; and one method with &lt;strong&gt;@OnMessage&lt;/strong&gt; :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;javax.websocket.OnMessage&lt;/span&gt;;
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;javax.websocket.ServerEndpoint&lt;/span&gt;;
      
      &lt;span style=&quot;color:#007&quot;&gt;@ServerEndpoint&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/echo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;EchoServer&lt;/span&gt; {
      
              &lt;span style=&quot;color:#007&quot;&gt;@OnMessage&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; handleMessage(&lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; message){
                      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Thanks for the message: &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + message;
              }
      
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;colist arabic&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;@ServerEndpoint transforms this POJO into a WebSocket Endpoint, the &lt;strong&gt;value&lt;/strong&gt; attribute is mandatory in order to set the access URI to this Endpoint&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;the &lt;em&gt;handleMessage&lt;/em&gt; method will be invoked for each received message&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;annotations&quot;&gt;Annotations&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This Java API provides several types of annotations to be fully compatible with the WebSocket protocol :&lt;/p&gt;
      &lt;/div&gt;
      &lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:100%; &quot;&gt;
      &lt;colgroup&gt;
      &lt;col style=&quot;width:50%;&quot;&gt;
      &lt;col style=&quot;width:50%;&quot;&gt;
      &lt;/colgroup&gt;
      &lt;thead&gt;&lt;tr&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Annotation&lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Role&lt;/th&gt;
      &lt;/tr&gt;&lt;/thead&gt;
      &lt;tbody&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@ServerEndpoint&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Declare a Server Endpoint&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@ClientEndpoint&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Declare a Client Endpoint&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@OnOpen&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Declare this method handles open events&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@OnMessage&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Declare this method handles Websocket messages&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@OnError&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Declare this method handles error&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@OnClose&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Declare this method handles WebSocket close events&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;@ServerEndpoint&lt;/code&gt; attributes are listed below :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;dlist&quot;&gt;
      &lt;dl&gt;
      &lt;dt class=&quot;hdlist1&quot;&gt;value&lt;/dt&gt;
      &lt;dd&gt;
      &lt;p&gt;relative URI or template URI (ex: &quot;/echo&quot;, &quot;/matches/{match-id}&quot;)&lt;/p&gt;
      &lt;/dd&gt;
      &lt;dt class=&quot;hdlist1&quot;&gt;decoders&lt;/dt&gt;
      &lt;dd&gt;
      &lt;p&gt;list of message decoder classnames&lt;/p&gt;
      &lt;/dd&gt;
      &lt;dt class=&quot;hdlist1&quot;&gt;encoders&lt;/dt&gt;
      &lt;dd&gt;
      &lt;p&gt;liste of message encoder classnames&lt;/p&gt;
      &lt;/dd&gt;
      &lt;dt class=&quot;hdlist1&quot;&gt;subprotocols&lt;/dt&gt;
      &lt;dd&gt;
      &lt;p&gt;list of the names of the supported subprotocols (ex: &lt;a href=&quot;http://wamp.ws)&quot;&gt;http://wamp.ws)&lt;/a&gt;&lt;/p&gt;
      &lt;/dd&gt;
      &lt;/dl&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;encoders-and-decoders&quot;&gt;Encoders and Decoders&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As described earlier in this article, the Endpoint server can receive different types of content in messages : data in text format (JSON, XML …) or binary format.&lt;br&gt;
      To effectively manage the messages from &lt;em&gt;peers client&lt;/em&gt; or to them in the application business code, it is possible to create &lt;strong&gt;Encoders and Decoders&lt;/strong&gt; Java classes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Whatever the transformation algorithm, it will then be possible to transform  :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;the business POJO to flow in the desired format for communication (JSON, XML, Binary …)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;inflows in specific format(JSON, XML..) to the business POJO&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Thus, the application code is structured so that the business logic is not affected by the type and format of messages exchanged between the &lt;em&gt;peer server&lt;/em&gt; and &lt;em&gt;peers client&lt;/em&gt; flows.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A concrete example is presented later in the article.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;websocket-client-endpoint&quot;&gt;WebSocket Client Endpoint&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This Java API also offers support for creating client-side Java Endpoints.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg4-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 4. Java Client Endpoint sample&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;&lt;span style=&quot;color:#007&quot;&gt;@ClientEndpoint&lt;/span&gt;
      &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;HelloClient&lt;/span&gt; {
      
              &lt;span style=&quot;color:#007&quot;&gt;@OnMessage&lt;/span&gt;
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; message(&lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; message){
                      &lt;span style=&quot;color:#777&quot;&gt;// code&lt;/span&gt;
              }
      }
      
      WebSocketContainer c = ContainerProvider.getWebSocketContainer();
      c.connectToServer(HelloClient.class, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;hello&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;us-open-application&quot;&gt;US OPEN Application&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The sample application is deployed as a WAR outcome of a build with Apache Maven.
      In addition to the traditional management WebSocket lifecycle, the sending messages workflow is as follows :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;each &lt;em&gt;peer client&lt;/em&gt; can connect to 1 or 4 live matches&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;each &lt;em&gt;peer client&lt;/em&gt; can disconnect from a match&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;at each point of a match, clients which are connected to this match will receive datas (score, service…)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;the &lt;em&gt;peer client&lt;/em&gt; may send a message to bet on the winner of the match&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;each time that one &lt;em&gt;peer client&lt;/em&gt; bet on a match, all others &lt;em&gt;peers clients&lt;/em&gt; which have bet on the same match, will receive a message with the total number of bettors&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;at the end of the match, &lt;em&gt;peers client&lt;/em&gt; receive a message containing the name of the winner and a specific message if they bet on this match&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;All messages are exchanged in JSON format&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The project layout is as follows :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg5-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 5. Maven project structure&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;+ src/main/java
         |+ com.mgreau.wildfly.websocket
            |+ decoders
               |- MessageDecoder.java   &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
            |+ encoders       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
               |- BetMessageEncoder.java
               |- MatchMessageEncoder.java
            |+ messages       &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
               |- BetMessage.java
               |- MatchMessage.java
               |- Message.java
            |+ rest       &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
               |- RestApplication.java
               |- TournamentREST.java
            |- MatchEndpoint.java    &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
            |- StarterService.java   &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
            |- TennisMatch.java      &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
      + src/main/resources
      + scr/main/webapp
         |+ css
         |+ images
         |+ js
            |+ live    &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;(8)&lt;/b&gt;
               |- app.js
               |- controllers.js
               |- directives.js
               |- services.js
            |- websocket.js  &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;(9)&lt;/b&gt;
         |+ templates
            |- bet.html
            |- match.html
            |- msg.html
         |- index.html
         |- live.html
      pom.xml&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;colist arabic&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Decode JSON messages sent from the &lt;em&gt;peer client&lt;/em&gt; (about bet on the winner) to a POJO (&lt;em&gt;BetMessage&lt;/em&gt;)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Encode in JSON format (via JSON-P), all messages about the winner and the match details for &lt;em&gt;peers clients&lt;/em&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;POJOs to handle messages sent between peers&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;REST endpoint to list all tournament’s matches&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;The application WebSocket Server Endpoint (&lt;em&gt;peer server&lt;/em&gt;)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;EJB @Startup in order to initialize this application at deployment time&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;POJO to handle informations about the match&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;8&quot;&gt;&lt;/i&gt;&lt;b&gt;8&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;AngularJS files to handle several matches (live.html) with REST and WebSocket calls&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;9&quot;&gt;&lt;/i&gt;&lt;b&gt;9&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;File containing the implementation of Javascript API for WebSocket protocol to handle the client side of the communication for the simple case (index.html)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;maven-dependencies-for-java-ee-7-api&quot;&gt;Maven dependencies for Java EE 7 API&lt;/h3&gt;
      &lt;div id=&quot;eg6-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 6. pom.xml with Java EE 7 dependencies&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;xml language-xml&quot;&gt;&lt;span style=&quot;color:#070&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
      ...
      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
              &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span&gt;
              &lt;span style=&quot;color:#777&quot;&gt;&amp;lt;!-- Java EE 7 --&amp;gt;&lt;/span&gt;
              &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;javaee.api.version&amp;gt;&lt;/span&gt;7.0&lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/javaee.api.version&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/properties&lt;/span&gt;
      
      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
              &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax&lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;javaee-api&lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${javaee.api.version}&lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
              &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
      ...
      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;colist arabic&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;It’s important to use the Java EE 7 dependencies to be able to deploy the same application in multiple Java EE application servers (WildFly, Glassfish…) &lt;strong&gt;without changing code&lt;/strong&gt;.&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;add-server-endpoint&quot;&gt;Add Server Endpoint&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This endpoint can receive messages about betting on the winner of a match (identified by match-id) and it can also send to &lt;em&gt;peers client&lt;/em&gt; all informations about the course of the match and bets.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg7-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 7. Server Endpoint : MatchEndpoint.java&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;&lt;span style=&quot;color:#007&quot;&gt;@ServerEndpoint&lt;/span&gt;(
                      value = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/matches/{match-id}&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                              decoders = { MessageDecoder.class }, &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
                              encoders = { MatchMessageEncoder.class, BetMessageEncoder.class } &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                      )
      &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;MatchEndpoint&lt;/span&gt; {
      
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Logger&lt;/span&gt; logger = &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Logger&lt;/span&gt;.getLogger(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;MatchEndpoint&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
      
               &lt;span style=&quot;color:#777&quot;&gt;/** All open WebSocket sessions */&lt;/span&gt;
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Set&lt;/span&gt;&amp;lt;Session&amp;gt; peers = &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Collections&lt;/span&gt;.synchronizedSet(&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;HashSet&lt;/span&gt;&amp;lt;Session&amp;gt;());
      
              &lt;span style=&quot;color:#777&quot;&gt;/** Handle number of bets by match */&lt;/span&gt;
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;AtomicInteger&lt;/span&gt;&amp;gt; nbBetsByMatch = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;ConcurrentHashMap&lt;/span&gt;&amp;lt;&amp;gt;();
      
              &lt;span style=&quot;color:#007&quot;&gt;@Inject&lt;/span&gt; StarterService ejbService;
      
              &lt;span style=&quot;color:#007&quot;&gt;@OnOpen&lt;/span&gt;
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; openConnection(Session session,
                                              &lt;span style=&quot;color:#007&quot;&gt;@PathParam&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;match-id&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; matchId) { &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                  session.getUserProperties().put(matchId, &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;);
                  peers.add(session);
      
                  &lt;span style=&quot;color:#777&quot;&gt;//Send live result for this match&lt;/span&gt;
                  send(&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; MatchMessage(ejbService.getMatches().get(matchId)), matchId);
              }
      
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; send(MatchMessage msg, &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; matchId) {
                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; {
                  &lt;span style=&quot;color:#777&quot;&gt;/* Send updates to all open WebSocket sessions for this match */&lt;/span&gt;
                  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;for&lt;/span&gt; (Session session : queue) {
                    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Boolean&lt;/span&gt;.TRUE.equals(session.getUserProperties().get(matchId))){
                      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (session.isOpen()){
                            session.getBasicRemote().sendObject(msg);        &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
                      }
                    }
                  }
                } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;catch&lt;/span&gt; (&lt;span style=&quot;color:#C00;font-weight:bold&quot;&gt;IOException&lt;/span&gt; | EncodeException e) {
                  logger.log(&lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Level&lt;/span&gt;.INFO, e.toString());
                }
              }
      
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; sendBetMessage(Session session, BetMessage betMsg, &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; matchId)
              {
                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; {
                    betMsg.setNbBets(nbBetsByMatch.get(matchId).get());
                    session.getBasicRemote().sendObject(betMsg);
                        logger.log(&lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Level&lt;/span&gt;.INFO, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BetMsg Sent: {0}&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, betMsg.toString());
                } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;catch&lt;/span&gt; (&lt;span style=&quot;color:#C00;font-weight:bold&quot;&gt;IOException&lt;/span&gt; | EncodeException e) {
                        logger.log(&lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Level&lt;/span&gt;.SEVERE, e.toString());
                }
              }
      
              &lt;span style=&quot;color:#007&quot;&gt;@OnMessage&lt;/span&gt;
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; message(&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;final&lt;/span&gt; Session session, BetMessage msg,    &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
                                              &lt;span style=&quot;color:#007&quot;&gt;@PathParam&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;match-id&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; matchId) {
                session.getUserProperties().put(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bet&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, msg.getWinner());
      
                &lt;span style=&quot;color:#777&quot;&gt;//Send betMsg with bet count&lt;/span&gt;
                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (!nbBetsByMatch.containsKey(matchId)){
                   nbBetsByMatch.put(matchId, &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;AtomicInteger&lt;/span&gt;());
                }
                nbBetsByMatch.get(matchId).incrementAndGet();
                sendBetMessages(&lt;span style=&quot;color:#069&quot;&gt;null&lt;/span&gt;, matchId, &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;);
              }
      
              &lt;span style=&quot;color:#007&quot;&gt;@OnClose&lt;/span&gt;
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; closedConnection(Session session,
                                  &lt;span style=&quot;color:#007&quot;&gt;@PathParam&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;match-id&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; matchId) {
                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (session.getUserProperties().containsKey(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bet&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)){
                        nbBetsByMatch.get(matchId).decrementAndGet();
                        sendBetMessages(&lt;span style=&quot;color:#069&quot;&gt;null&lt;/span&gt;, matchId, &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;);
                }
                &lt;span style=&quot;color:#777&quot;&gt;/* Remove this connection from the queue */&lt;/span&gt;
                peers.remove(session);
              }
      ...
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;colist arabic&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Access URI to this Endpoint, as the application context-root is &lt;em&gt;/usopen&lt;/em&gt;, the final URL looks like this : &lt;code&gt;ws://&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/usopen/matches/1234&lt;/code&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;
      &lt;em&gt;MessageDecoder&lt;/em&gt; transforms the incoming JSON flow (about the bet on the winner) into a POJO &lt;em&gt;BetMessage&lt;/em&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;This 2 encoders add the ability to transform from &lt;em&gt;MatchMessage&lt;/em&gt; POJO and &lt;em&gt;BetMessage&lt;/em&gt; POJO to messages in JSON format&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;
      &lt;code&gt;@PathParam&lt;/code&gt; annotation allows to extract part of the WebSocket request and pass the value (id match) as the parameter of the method, it is possible to manage several match with multiple clients for each match.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Send, to connected peers, messages about the course of the match. Thanks to the &lt;em&gt;MatchMessageEncoder&lt;/em&gt; object, simply pass the &lt;em&gt;MatchMessage&lt;/em&gt; object.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Handle received messages about the bet on the winner, thanks to the &lt;em&gt;MessageDecoder&lt;/em&gt; object, one of the parameters of this method is a &lt;em&gt;BetMessage&lt;/em&gt; object&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;encodes-and-decodes-messages&quot;&gt;Encodes and Decodes messages&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To encode or decode messages exchanged between peers, simply implement the appropriate interface according to the message type (text, binary) and direction of processing (encoding, decoding), then redefine the associated method.&lt;br&gt;
      In the example below, it’s the &lt;strong&gt;encoder&lt;/strong&gt; for MatchMessage POJO to JSON format. The API used to perform this treatment is also a new API released with Java EE 7 : &lt;a href=&quot;http://jcp.org/en/jsr/detail?id=353&quot;&gt;Java API for JSON Processiong (JSON-P)&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg8-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 8. Text Encoder : MatchMessageEncoder.java&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;MatchMessageEncoder&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;implements&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Encoder&lt;/span&gt;.Text&amp;lt;MatchMessage&amp;gt; {
      
              &lt;span style=&quot;color:#007&quot;&gt;@Override&lt;/span&gt;
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; encode(MatchMessage m) &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;throws&lt;/span&gt; EncodeException {
                      &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;StringWriter&lt;/span&gt; swriter = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;StringWriter&lt;/span&gt;();
                      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; (JsonWriter jsonWrite = Json.createWriter(swriter)) {
                              JsonObjectBuilder builder = Json.createObjectBuilder();
                              builder.add(
                                      &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;match&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
                                      Json.createObjectBuilder()
                                              .add(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;serve&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, m.getMatch().getServe())
                                              .add(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, m.getMatch().getTitle())
                                              ...
                              }
      
                              jsonWrite.writeObject(builder.build());
                      }
                      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; swriter.toString();
              }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;html5-web-client-single-match-index-html&quot;&gt;HTML5 Web Client (single match - index.html)&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The index.html page of this application loads the &lt;strong&gt;websocket.js&lt;/strong&gt; file to implement the Javascript WebSocket API and thus interact with the Java Server Endpoint. This page handle only one single match.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg9-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 9. API Javascript implemented into websocket.js&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay nowrap&quot;&gt;&lt;code class=&quot;javascript language-javascript&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;var&lt;/span&gt; wsUrl;
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (window.location.protocol == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https:&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
              wsUrl = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;wss://&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + window.location.host + &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;:8443/usopen/matches/1234&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
      } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt; {
              wsUrl = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ws://&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + window.location.host + &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;:8000/usopen/matches/1234&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
      }
      
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;createWebSocket&lt;/span&gt;(host) {
              &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (!window.WebSocket) {    &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
              ...
              } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt; {
                      socket = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; WebSocket(host);   &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                      socket.&lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onopen&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;() {
                              document.getElementById(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;m1-status&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).innerHTML = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;CONNECTED...&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
                      };
                      socket.&lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onclose&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;() {
                              document.getElementById(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;m1-status&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).innerHTML = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FINISHED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
                      };
                      ...
                      socket.&lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onmessage&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(msg) {
                              &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; {
                                      console.log(data);
                                      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;var&lt;/span&gt; obj = JSON.parse(msg.data);     &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                                      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (obj.hasOwnProperty(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;match&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)){   &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
                                              &lt;span style=&quot;color:#777&quot;&gt;//title&lt;/span&gt;
                                              m1title.innerHTML = obj.match.title;
                                              &lt;span style=&quot;color:#777&quot;&gt;// comments&lt;/span&gt;
                                              m1comments.value = obj.match.comments;
                                              &lt;span style=&quot;color:#777&quot;&gt;// serve&lt;/span&gt;
                                              &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (obj.match.serve === &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;player1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
                                                      m1p1serve.innerHTML = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;S&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
                                                      m1p2serve.innerHTML = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
                                              } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt; {
                                                      m1p1serve.innerHTML = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
                                                      m1p2serve.innerHTML = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;S&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
                                              }
                                              ..
                                      }
                                      ...
                              } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;catch&lt;/span&gt; (exception) {
                                      data = msg.data;
                                      console.log(data);
                              }
                      }
              }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;colist arabic&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Choose the appropriate WebSocket protocol according to the HTTP protocol currently used (secure or not)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Check if the browser supports WebSocket API&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Create the WebSocket object&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Try to parse the JSON message sent by &lt;em&gt;peer server&lt;/em&gt;, into the function called by &lt;code&gt;onmessage&lt;/code&gt; Event Handler&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Check the received object type (MatchMessage or BetMessage) to achieve adequate treatment with DOM&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To find out which browsers are compatible with &lt;strong&gt;WebSocket API&lt;/strong&gt; &lt;a href=&quot;http://caniuse.com/#search=websocket&quot;&gt;visit the website caniuse.com&lt;/a&gt;. Today, the latest versions of browsers are compatible excepted for Android and Opera Mini Browser, which represent, both together, only 3% of web traffic.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;angularjs-client-several-matches-live-html&quot;&gt;AngularJS Client (several matches - live.html)&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As we saw on the beginning of this post, the version to handle severals matches is developed with AngularJS on the client side.
      So there are 4 JS files which contains :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;app.js&lt;/code&gt; : just define the &lt;em&gt;tennisApp&lt;/em&gt; angular application&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;controllers.js&lt;/code&gt; : the TournamentCtrl controller&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;directives.js&lt;/code&gt; :&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;bet directive and bet.html template to show the number of bettors and the current bet&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;match directive and match.html template to handle live informations&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;msg directive and msg.html template to shwo a message at the end of the match with the bet result if needed&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;services.js&lt;/code&gt; :&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;WebSocketService : to handle WebSocket lifecycle with callback&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;TournamentRESTService : to get all matches from REST Endpoint server&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;BetsService and MatchesServices&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;This post is not a tutorial about AngularJS since it’s my first app with this framework. But it was a quick solution to handle several matches on the client side. You can read the 3 following posts to better understand the JS code : &lt;a href=&quot;http://www.frangular.com/2013/10/scope-isole-dans-les-directives.html&quot;&gt;directives in French&lt;/a&gt; and &lt;a href=&quot;http://suhairhassan.com/2013/10/21/refactoring-to-angularjs-directive.html#.Un1t12S1Xv2&quot;&gt;Refactoring to AngularJS directives&lt;/a&gt; and &lt;a href=&quot;http://clintberry.com/2013/angular-js-websocket-service/&quot;&gt;AngularJS WebSocket Service example&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;source-code-on-github&quot;&gt;Source code on Github&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can &lt;strong&gt;fork this project on Github&lt;/strong&gt; at &lt;code&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/mgreau/javaee7-websocket&quot;&gt;https://github.com/mgreau/javaee7-websocket&lt;/a&gt;&lt;/strong&gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This sample application is basic, there could be many improvements like betting on other criteria…&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;'A feature that could be interesting technically, would be to create a new type of &lt;strong&gt;bet based on the coordinates of each winning point&lt;/strong&gt;. Simply draw the ground through the HTML5 Canvas API and manage the coordinates selected by the user (such as winning point) and then compare with the actual coordinates at a point winner. '&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;build-and-deploy-the-war&quot;&gt;Build and Deploy the WAR&lt;/h3&gt;
      &lt;div class=&quot;admonitionblock important&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Prerequisite :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;JDK 7&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Apache Maven 3.0.4+&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Java EE 7 Application Server (WildFly 8)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In order to build the WAR, you just have to execute the Maven command below ;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;mvn clean package&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If your application server is WildFly, you can quickly deploy the WAR with the command below (WildFly has to be started) :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;mvn jboss-as:deploy&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The usopen application is then available at :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:8080/usopen/&quot;&gt;http://localhost:8080/usopen/&lt;/a&gt; for the simple case with only native Javascript&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://localhost:8080/usopen/matches&quot;&gt;http://localhost:8080/usopen/matches&lt;/a&gt; for the version with severals matches and AngularJS&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;WildFly 8 uses its new &lt;code&gt;&lt;strong&gt;Web Server called &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt;&lt;/strong&gt;&lt;/code&gt; which replaces Tomcat.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;'I didn’t test this application on Glassfish 4, but since I’m using only Java EE 7 API dependencies, it could work with the same code without problem. Let me know if you have troubles with GlassFish. '&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;benchmark-websocket-vs-rest&quot;&gt;Benchmark : WebSocket VS REST&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In order to have some metrics about the performance of this new protocol, Arun Gupta has developed &lt;a href=&quot;https://github.com/arun-gupta/javaee7-samples/tree/master/websocket/websocket-vs-rest&quot;&gt;an application that allows compare the execution time of&lt;/a&gt; the same treatment performed by WebSocket code and REST code.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Each endpoint (REST Endpoint and WebSocket Endpoint) just do an &quot;echo&quot; so they only return the flows they receive. The web interface of the application allows you to define the size of the message and the number of times that the message must be sent before the end of the test.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The benchmark results, shown below, are quite eloquent :&lt;/p&gt;
      &lt;/div&gt;
      &lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:100%; &quot;&gt;
      &lt;colgroup&gt;
      &lt;col style=&quot;width:33%;&quot;&gt;
      &lt;col style=&quot;width:33%;&quot;&gt;
      &lt;col style=&quot;width:33%;&quot;&gt;
      &lt;/colgroup&gt;
      &lt;thead&gt;&lt;tr&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Request&lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Total execution time&lt;br&gt;&lt;strong&gt;REST Endpoint&lt;/strong&gt;
      &lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Total execution time&lt;br&gt;&lt;strong&gt;WebSocket Endpoint&lt;/strong&gt;
      &lt;/th&gt;
      &lt;/tr&gt;&lt;/thead&gt;
      &lt;tbody&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Sending 10 messages of 1 byte&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;220 ms (63 ms)*&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7 ms (29ms)*&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Sending 100 messages of 10 bytes&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;986 ms (587 ms)*&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;57 ms (74 ms)*&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Sending 1000 messages of 100 bytes&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10 210 ms (4 636 ms)*&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;179 ms (288 ms)*&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Sending 5000 messages of 1000 bytes&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;54 449 ms (18 049 ms)*&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1202 ms (2862 ms)*&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;Values between ()* represent the same tests on my laptop (MacBook Pro 2013 i5 - 8Go - 128SSD) with WildFly 8.0.0-beta1 with default configuration.&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;references-about-websocket&quot;&gt;References about WebSocket&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;I would particularly recommend &lt;a href=&quot;https://twitter.com/arungupta&quot;&gt;Arun Gupta&lt;/a&gt;'s conferences, which allow you in less than 1 hour to discover and understand the WebSocket technology in general and the Java API for WebSocket.&lt;br&gt;
      For more advanced information, the ideal is IETF, W3C and Java specifications.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist bibliography&quot;&gt;
      &lt;ul class=&quot;bibliography&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc6455&quot;&gt;RFC 6455: The WebSocket Protocol&lt;/a&gt; - &lt;em&gt;IETF Specification&lt;/em&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://w3.org/TR/websockets/&quot;&gt;W3C: The WebSocket API&lt;/a&gt; - &lt;em&gt;W3C Specification&lt;/em&gt; (Candidate Recommandation)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=356&quot;&gt;JSR 356: Java API for WebSocket Protocol&lt;/a&gt; - &lt;em&gt;Java Specification&lt;/em&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://glassfish.java.net/adoptajsr/jsr356.html&quot;&gt;Adopt a JSR - JSR 356&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=QqbuDFIT5To&quot;&gt;Java EE 7 &amp;amp; WebSocket API&lt;/a&gt; - &lt;em&gt;Arun Gupta’s conference @ SF&lt;/em&gt; (from the 46th minute)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.parleys.com/play/51c1cceae4b0ed8770356828/chapter4/about&quot;&gt;Getting Started with WebSocket and SSE&lt;/a&gt; - &lt;em&gt;Arun Gupta’s conference @ Devoxx UK 2013&lt;/em&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;This article was structured based on the UK 2013 Devoxx conference.&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This article has introduced, through a concrete example, &lt;strong&gt;the WebSocket protocol, the HTML5 WebSocket API and Java API for WebSocket released with Java EE 7&lt;/strong&gt;. It was already possible to use WebSocket with Java frameworks like &lt;a href=&quot;http://async-io.org/download.html&quot;&gt;Atmosphere&lt;/a&gt; but lacked a standard.&lt;br&gt;
      Today all &lt;strong&gt;standards are completed or about to be&lt;/strong&gt;, this new technology meets a specific need and is promising in terms of performance. To be heavily used, this protocol will need to be allowed in businesses where often only the HTTP protocol is permitted.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://mgreau.github.io/posts/2013/09/27/javaee7-api-websocket-html5.html</id>
    <title>Java EE 7 et l&#8217;API Java pour WebSocket (JSR 356)</title>
    <updated>2013-10-26T21:36:50+02:00</updated>
    <published>2013-09-27T00:00:00+00:00</published>
    <link href="http://mgreau.github.io/posts/2013/09/27/javaee7-api-websocket-html5.html" rel="alternate" type="text/html" />
    <author>
      <name>Maxime Gréau</name>
    </author>
    <category term="javaee7"></category>
    <category term="javaee"></category>
    <category term="websocket"></category>
    <category term="html5"></category>
    <category term="wildfly"></category>
    <summary>
      
      
      
      
      
      
      
      
      
      Cet article présente et met en oeuvre à travers un exemple concret et disponible en ligne, une des 4 nouvelles JSRs de Java EE 7, à savoir l&#8217;API Java pour communiquer via le protocole WebSocket (JSR 356), .
      
      
      
      
      
      Après la lecture de cet article, vous devriez être en mesure de comprendre la définition de ce qu&#8217;il est possible de faire avec le protocole WebSocket, donnée lors de Devoox UK par Arun Gupta :
      
      
      
      WebSocket gives you bidirectionnal, full duplex, communication channel over a single TCP.
      
      
      
      pass::[more]
      
      
      
      Table des matières de l'article
      
      Introduction à Java EE 7
      DEMO : Application HTML5 / JSR-356 API déployée sur Wildfly...
    </summary>
    <content type="html">
      &lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      Cet article présente et met en oeuvre à travers un exemple concret et &lt;a href=&quot;http://wildfly-mgreau.rhcloud.com/usopen/&quot;&gt;disponible en ligne&lt;/a&gt;, une des 4 nouvelles JSRs de &lt;strong&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=342&quot;&gt;Java EE 7&lt;/a&gt;&lt;/strong&gt;, à savoir &lt;strong&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=356&quot;&gt;l’API Java pour communiquer via le protocole WebSocket (JSR 356)&lt;/a&gt;&lt;/strong&gt;, .
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Après la lecture de cet article, vous devriez être en mesure de comprendre la définition de ce qu’il est possible de faire avec le protocole WebSocket, donnée lors de Devoox UK par &lt;a href=&quot;https://twitter.com/arungupta&quot;&gt;Arun Gupta&lt;/a&gt; :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;think&quot; class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;WebSocket gives you bidirectionnal, full duplex, communication channel over a single TCP.&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;pass::[more]&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
      &lt;div id=&quot;toctitle&quot;&gt;Table des matières de l'article&lt;/div&gt;
      &lt;ul class=&quot;sectlevel1&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#introduction-java-ee-7&quot;&gt;Introduction à Java EE 7&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#demo-application-html5-jsr-356-api-d-ploy-e-sur-wildfly-8-openshift&quot;&gt;DEMO : Application HTML5 / JSR-356 API déployée sur Wildfly 8 (OpenShift)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#websocket-ws-un-nouveau-protocole-diff-rent-de-http&quot;&gt;WebSocket (WS) : un nouveau protocole différent de HTTP&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;
      &lt;ul class=&quot;sectlevel2&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#handshake&quot;&gt;Handshake&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#data-transfer&quot;&gt;Data transfer&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#websocket-javascript-api-client&quot;&gt;WebSocket Javascript API (Client)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#jsr-386-java-api-pour-websocket&quot;&gt;JSR 386 : Java API pour WebSocket&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;
      &lt;ul class=&quot;sectlevel2&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#websocket-endpoint-serveur&quot;&gt;WebSocket Endpoint : Serveur&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#annotations&quot;&gt;Annotations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#encoders-et-decoders&quot;&gt;Encoders et Decoders&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#websocket-endpoint-client&quot;&gt;WebSocket Endpoint : Client&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#application-us-open&quot;&gt;Application US OPEN&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;
      &lt;ul class=&quot;sectlevel2&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#d-pendances-maven-java-ee-7&quot;&gt;Dépendances Maven Java EE 7&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cr-er-le-server-endpoint&quot;&gt;Créer le Server Endpoint&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#encoder-et-d-coder-les-messages-chang-s&quot;&gt;Encoder et Décoder les messages échangés&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#client-web-html5&quot;&gt;Client Web HTML5&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sources-de-l-exemple-sur-github&quot;&gt;Sources de l’exemple sur Github&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#construire-et-d-ployer-le-war&quot;&gt;Construire et Déployer le WAR&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#performances-websocket-vs-rest&quot;&gt;Performances : WebSocket vs REST&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#r-f-rences-pour-tout-savoir-sur-les-websocket&quot;&gt;Références pour tout savoir sur les WebSocket&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;introduction-java-ee-7&quot;&gt;Introduction à Java EE 7&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;La &lt;strong&gt;Plateforme Java Entreprise Edition&lt;/strong&gt; est sortie en version 7 (Java EE 7) au mois de Juin 2013.
      Dans la continuité des versions Java EE 5 et Java EE 6, &lt;strong&gt;Java EE 7&lt;/strong&gt; propose toujours de simplifier le travail du développeur.
      Cette version agrémente les versions précédentes avec 3 objectifs principaux :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;s’interfacer avec &lt;strong&gt;HTML5&lt;/strong&gt; (WebSocket API, JSON-P API, JAX-RS)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;avoir une &lt;strong&gt;meilleure productivité&lt;/strong&gt; (nouvelles annotations, moins de code inutile, meilleure cohésion entre JSRs)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;répondre aux &lt;strong&gt;besoins des entreprises&lt;/strong&gt; (Batch API, JMS API 2.0)&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div id=&quot;javaee7_intro&quot; class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://mgreau.github.io/images/posts/javaee7_intro.png&quot; alt=&quot;Java EE 7 - Objectifs&quot;&gt;
      &lt;/div&gt;
      &lt;div class=&quot;title&quot;&gt;Figure 1. Les 3 objectifs de Java EE 7&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Java Platform, Entreprise Edition 7 (JSR 342), se résume donc autour de :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;4 nouvelles spécifications : &lt;strong&gt;&lt;code&gt;Java API for WebSocket 1.0&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;Java API for JSON Processing 1.0&lt;/code&gt;&lt;/strong&gt; , &lt;strong&gt;&lt;code&gt;Batch Applications 1.0&lt;/code&gt;&lt;/strong&gt; et &lt;strong&gt;&lt;code&gt;Concurrency Utilities for Java EE 1.0&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;3 spécifications avec une mise à jour majeure : &lt;strong&gt;&lt;code&gt;JMS 2.0&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;JAX-RS 2.0&lt;/code&gt;&lt;/strong&gt; et &lt;strong&gt;&lt;code&gt;EL 3.0&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;ainsi que 7 spécifications mises à jour dans une version mineure : &lt;strong&gt;&lt;code&gt;JPA 2.1&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;Servlet 3.1&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;EJB 3.2&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;CDI 1.1&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;JSF 2.2&lt;/code&gt;&lt;/strong&gt; et &lt;strong&gt;&lt;code&gt;Bean Validation 1.1&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;demo-application-html5-jsr-356-api-d-ploy-e-sur-wildfly-8-openshift&quot;&gt;DEMO : Application HTML5 / JSR-356 API déployée sur Wildfly 8 (OpenShift)&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Les plus impatients peuvent accéder à la &lt;code&gt;&lt;a href=&quot;http://wildfly-mgreau.rhcloud.com/usopen/&quot;&gt;démonstration en ligne&lt;/a&gt;&lt;/code&gt; du code qui va être, en partie, expliqué dans cet article.
      Il s’agit d’une application qui permet :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;de suivre un match de Tennis en Live (Finale de l’US Open 20013) sans aucune action autre que la connexion à l’URL&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;de parier sur le vainqueur du match&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Vous allez me dire : &quot;Rien d’extraordinaire !&quot;, et vous aurez raison.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A première vue, ce sont des choses que nous connaissons déjà sur beaucoup d’applications aujourd’hui, mais celle-ci est intéressante techniquement car comme vous le verrez au cours de l’article, tout est basé sur du &lt;strong&gt;standard autour du nouveau protocole WebSocket (ws:// ou wss://)&lt;/strong&gt; et non sur du &quot;hacking&quot; de protocole HTTP.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Les technologies utilisées pour le developpement de cette application sont :&lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;côté client : &lt;code&gt;HTML5&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;Javascript (WebSocket API)&lt;/code&gt; avec &lt;em&gt;Bootstrap CSS mais sans JQuery ou BootstrapJS&lt;/em&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;côte serveur : &lt;code&gt;Java API for WebSocket&lt;/code&gt;, &lt;code&gt;EJB&lt;/code&gt;, &lt;code&gt;JSON-P&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div id=&quot;websocket_example&quot; class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;a class=&quot;image&quot; href=&quot;http://wildfly-mgreau.rhcloud.com/usopen/&quot;&gt;&lt;img src=&quot;http://mgreau.github.io/images/posts/websocket_example.png&quot; alt=&quot;Mise en oeuvre des WebSocket (Java API et Javascript API)&quot;&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class=&quot;title&quot;&gt;Figure 2. Mise en oeuvre des WebSocket (Java API et Javascript API)&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Non cette démonstration n’est &lt;strong&gt;pas une application de chat :)&lt;/strong&gt;
      Il est évident que la démo &quot;chat&quot; est celle qui vient en premier à l’esprit pour illustrer l’utilisation de la technologie WebSocket. Néanmoins, il existe beaucoup d’autres cas d’utilisation, comme par exemple le travail collaboratif sur un document texte en ligne. Ou encore les jeux en ligne comme le jeu d'échec présenté lors de la &lt;a href=&quot;https://blogs.oracle.com/javaone/entry/the_javaone_2013_technical_keynote&quot;&gt;keynote de JavaOne 2013&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;Cette application est disponible sur le Cloud grâce à &lt;a href=&quot;https://www.openshift.com/&quot;&gt;OpenShift&lt;/a&gt;, la solution Cloud de RedHat. Elle est déployée sur le serveur d’applications Wildfly 8.0.0-Beta3 (normalement certifié Java EE 7 fin 2013). Pour mettre en place un serveur de ce type, il suffit de suivre &lt;a href=&quot;https://www.openshift.com/blogs/deploy-websocket-web-applications-with-jboss-wildfly&quot;&gt;le post de Shekhar Gulati&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;websocket-ws-un-nouveau-protocole-diff-rent-de-http&quot;&gt;WebSocket (WS) : un nouveau protocole différent de HTTP&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc2616&quot;&gt;HTTP&lt;/a&gt; est le protocole standard utilisé pour le Web, il est très efficace pour certains cas d’utilisation mais il dispose néanmoins de &lt;strong&gt;quelques inconvénients&lt;/strong&gt; dans le cas &lt;strong&gt;d’applications Web intéractives&lt;/strong&gt; :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;half-duplex&lt;/strong&gt; : basé sur le pattern request/response, le client envoi une requête puis le serveur réalise un traitement avant de renvoyer une réponse, le client est donc contraint d’attendre une réponse du serveur&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;verbose&lt;/strong&gt; : beaucoup d’informations sont présentes avec les headers HTTP associés au message, aussi bien dans la requête HTTP que dans la réponse HTTP&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;pour faire du &lt;strong&gt;server push&lt;/strong&gt;, il est nécessaire d’utiliser des méthodes de contournement (polling, long polling, Comet/Ajax) car il n’existe pas de standard.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Ce protocole n’est donc pas optimisé pour scaler sur des applications qui ont d’important besoins de communication temps réel bi-directionnelle. C’est pourquoi le &lt;strong&gt;nouveau protocole WebSocket&lt;/strong&gt; propose des fonctionnalités plus évoluées que HTTP, puisqu’il est :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;basé sur &lt;strong&gt;&lt;code&gt;1 unique connexion TCP entre 2 peers&lt;/code&gt;&lt;/strong&gt; (en HTTP chaque requête/réponse necessite une nouvelle connexion TCP)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;&lt;code&gt;bi-directionnel&lt;/code&gt;&lt;/strong&gt; : le client peut envoyer un message au serveur et le serveur peut envoyer un message au client&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;&lt;code&gt;full-duplex&lt;/code&gt;&lt;/strong&gt; : le client peut envoyer plusieurs messages vers le serveur et le serveur vers le client sans attendre de réponse l’un de l’autre&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock warning&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;Le terme &lt;strong&gt;client&lt;/strong&gt; est utilisé uniquement pour définir celui qui va initialiser la connexion. Dès lors que la connexion est établie, le client et le serveur deviennent tous les deux des &lt;strong&gt;&lt;code&gt;peers&lt;/code&gt;&lt;/strong&gt;, avec les mêmes pouvoirs l’un par rapport à l’autre.&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Le protocole WebSocket devait à l’origine faire partie de la spécification HTML5 mais comme celle-ci sortira officiellement en 2014, il est finalement défini, au même titre que HTTP, par une spécification IETF, &lt;a href=&quot;http://tools.ietf.org/html/rfc6455&quot;&gt;la RFC 6455&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Comme le montre le schéma ci-après, le &lt;strong&gt;protocole WebSocket fonctionne en 2 phases&lt;/strong&gt; nommées :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;&lt;code&gt;handshake&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;&lt;code&gt;data transfer&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div id=&quot;websocket_protocol&quot; class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://mgreau.github.io/images/posts/WebSocket_Protocol.png&quot; alt=&quot;Schéma d'explications du protocole WebSocket&quot; width=&quot;550&quot;&gt;
      &lt;/div&gt;
      &lt;div class=&quot;title&quot;&gt;Figure 3. Explication du protocole WebSocket&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;handshake&quot;&gt;Handshake&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;La phase nommée &lt;strong&gt;Handshake&lt;/strong&gt; correspond à un &lt;strong&gt;unique échange requête/réponse HTTP&lt;/strong&gt; entre l’initiateur de la connexion (peer client)  et le peer serveur. Cet échange HTTP est spécifique car il utilise la notion &lt;a href=&quot;http://tools.ietf.org/html/rfc2616#section-14.42&quot;&gt;&lt;strong&gt;d’Upgrade, définie dans la spécification HTTP&lt;/strong&gt;.&lt;/a&gt;&lt;br&gt;
      Le principe est simple : &lt;strong&gt;l’Upgrade HTTP&lt;/strong&gt; permet au client de communiquer avec le serveur pour lui demander de changer de protocole de communication et ainsi faire en sorte que le client et le serveur utilisent un protocole autre que HTTP pour discuter.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg1-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 1. Exemple de Requête HTTP Handshake&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;GET /usopen/matches/1234 HTTP/1.1     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      Host: wildfly-mgreau.rhcloud.com:8000  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
      Upgrade: websocket  &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
      Connection: Upgrade &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
      Origin: http://wildfly-mgreau.rhcloud.com
      Sec-WebSocket-Key:0EK7XmpTZL341oOh7x1cDw==
      Sec-WebSocket-Version:13&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;colist arabic&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Methode HTTP GET et version 1.1 obligatoires&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Host utilisé pour la connexion WebSocket&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Demande d’Upgrade vers le protocole WebSocket&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Demande d’Upgrade HTTP pour changer de protocole&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg2-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 2. Exemple de Réponse HTTP Handshake&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;HTTP/1.1 101 Switching Protocols &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      Connection:Upgrade
      Sec-WebSocket-Accept:SuQ5/hh0kStSr6oIzDG6gRfTx2I=
      Upgrade:websocket &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;colist arabic&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Code HTTP 101, le serveur est compatible et accepte le changement de protocole&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;L’upgrade vers le protocole WebSocket est accepté&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock important&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;Lorsque la demande d’upgrade du protocole HTTP vers le protocole Web Socket a été validée par le serveur endpoint, il n’y a plus de communication possible en HTTP, tous les échanges sont réalisés via le protocole WebSocket.&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;data-transfer&quot;&gt;Data transfer&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Une fois que le &lt;strong&gt;handshake&lt;/strong&gt; est acceptée, la mise en place du protocole WebSocket est donc acquise. Une connexion côté &lt;em&gt;peer server&lt;/em&gt; est ouverte ainsi que côté &lt;em&gt;peer client&lt;/em&gt;, une gestion de callback est activée pour initier la communication.&lt;br&gt;
      La phase de &lt;strong&gt;Data transfer&lt;/strong&gt; peut alors entrer en jeu, c’est-à-dire que les 2 peers peuvent désormais &lt;strong&gt;s'échanger des messages dans une communication bi-directionnelle et full-duplex&lt;/strong&gt;.&lt;br&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Comme le montre le schéma de la &lt;strong&gt;Figure 3&lt;/strong&gt;, le &lt;code&gt;peer server&lt;/code&gt; peut envoyer plusieurs messages (dans l’exemple : 1 message à chaque point du match) sans aucune réponse du &lt;code&gt;peer client&lt;/code&gt; qui, lui, peut également envoyer des messages à n’importe quel moment (dans l’exemple : le pari sur le vainqueur du match).
      Chaque peer peut envoyer un message spécifique afin de clôturer la connexion.&lt;br&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Dans Java EE7, le code côté &lt;code&gt;peer server&lt;/code&gt; est en &lt;strong&gt;Java&lt;/strong&gt; alors que le code côté &lt;code&gt;peer client&lt;/code&gt; est en &lt;strong&gt;Java ou en Javascript&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;websocket-javascript-api-client&quot;&gt;WebSocket Javascript API (Client)&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Pour communiquer à partir d’une application Web avec un serveur en utilisant le protocole WebSocket, il est nécessaire d’utiliser &lt;strong&gt;une API cliente en Javascript&lt;/strong&gt;. C’est le W3C qui définit cette API.&lt;br&gt;
      La spécification W3C de cette &lt;a href=&quot;http://w3.org/TR/websockets/&quot;&gt;API Javascript pour WebSocket&lt;/a&gt; est en cours de finalisation. &lt;a href=&quot;http://www.w3.org/TR/websockets/#websocket&quot;&gt;L’interface WebSocket&lt;/a&gt; propose, entre-autres, les éléments suivants :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;un attribut pour l’URL de connexion au server Endpoint (&lt;code&gt;url&lt;/code&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;un attribut sur l'état de la connexion (&lt;code&gt;readyState&lt;/code&gt; : CONNECTING, OPEN, CLOSING, CLOSED)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;des &lt;strong&gt;Event-Handler (gestionnaire d'évènement)&lt;/strong&gt; pour s’adapter aux méthodes du cycle de vie des WebSocket, par exemple :&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;l’Event-Handler &lt;code&gt;onopen&lt;/code&gt; est appelé lorsqu’une nouvelle connexion est initiée&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;l’Event-Handler &lt;code&gt;onerror&lt;/code&gt; est appelé lorsqu’une erreur est reçue pendant la communication&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;l’Event-Handler &lt;code&gt;onmessage&lt;/code&gt; est appelé lorsqu’un message est reçu&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;les méthodes (&lt;code&gt;send(DOMString data)&lt;/code&gt;, &lt;code&gt;send(Blob data)&lt;/code&gt;) avec lesquelles il est possible d’envoyer différents types de flux (texte, binaire) vers le serveur Endpoint&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg3-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 3. Exemple de code Javascript, issue de &lt;a href=&quot;http://websocket.org&quot;&gt;http://websocket.org&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;javascript language-javascript&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;var&lt;/span&gt; wsUri = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ws://echo.websocket.org/&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
      
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;testWebSocket&lt;/span&gt;() {
      
              websocket = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; WebSocket(wsUri);
              websocket.&lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onopen&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(evt) { onOpen(evt) };
              websocket.&lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onclose&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(evt) { onClose(evt) };
              websocket.&lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onmessage&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(evt) { onMessage(evt) };
              websocket.&lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onerror&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(evt) { onError(evt) }; }
      }
      
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onOpen&lt;/span&gt;(evt) {
              writeToScreen(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;CONNECTED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
              doSend(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;WebSocket rocks&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
      }
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onClose&lt;/span&gt;(evt) {
              writeToScreen(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;DISCONNECTED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
      }
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onMessage&lt;/span&gt;(evt) {
              writeToScreen(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;&amp;lt;span style=&quot;color: blue;&quot;&amp;gt;RESPONSE: &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + evt.data+&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
              websocket.close();
      }
      
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onError&lt;/span&gt;(evt) {
              writeToScreen(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;&amp;lt;span style=&quot;color: red;&quot;&amp;gt;ERROR:&amp;lt;/span&amp;gt; &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + evt.data);
      }
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;doSend&lt;/span&gt;(message) {
              writeToScreen(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;SENT: &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + message);
              websocket.send(message);
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;jsr-386-java-api-pour-websocket&quot;&gt;JSR 386 : Java API pour WebSocket&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Le W3C définit donc comment utiliser WebSocket en Javascript, le &lt;strong&gt;Java Communitee Process (JCP)&lt;/strong&gt; fait de même pour le monde Java via la JSR 386 .&lt;br&gt;
      La JSR 356 définit ainsi une &lt;a href=&quot;http://jcp.org/en/jsr/detail?id=356&quot;&gt;API Java pour WebSocket&lt;/a&gt; qui propose :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;la création d’un &lt;code&gt;&lt;strong&gt;WebSocket Endpoint&lt;/strong&gt;&lt;/code&gt; (serveur ou client), nom donné au composant Java capable de communiquer via le protocole WebSocket&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;la possibilité d’utiliser l’approche par &lt;strong&gt;annotation Java&lt;/strong&gt; ou par programmation&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;la possibilité &lt;strong&gt;d’envoyer et de consommer des messages&lt;/strong&gt; de contrôles, textuels ou binaires via ce protocole&lt;/p&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;de gérer le message en tant que message complet ou par une séquence de messages partiels&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;envoyer ou recevoir les messages en tant qu’objets Java (notion d'&lt;strong&gt;encoders/decoders&lt;/strong&gt;)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;envoyer les messages &lt;strong&gt;en synchrone ou en asynchrone&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;la configuration et la &lt;strong&gt;gestion des sessions WebSocket&lt;/strong&gt; (timeout, cookies…)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;une intégration dans &lt;strong&gt;Java EE Web Profile&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;em&gt;L’implémentation de référence Java pour l’API WebSocket est &lt;a href=&quot;https://tyrus.java.net/&quot;&gt;le projet Tyrus&lt;/a&gt;&lt;/em&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;websocket-endpoint-serveur&quot;&gt;WebSocket Endpoint : Serveur&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;La transformation d’un Plain Old Java Object (POJO) vers un &lt;strong&gt;WebSocket Endpoint&lt;/strong&gt; de type serveur (c’est-à-dire capable de gérer des requêtes de plusieurs clients sur une même URI) est &lt;strong&gt;extrêment simple&lt;/strong&gt;, puisqu’il suffit d’annoter la classe avec &lt;strong&gt;@ServerEndpoint&lt;/strong&gt; et une méthode du POJO avec &lt;strong&gt;@OnMessage&lt;/strong&gt; :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;javax.websocket.OnMessage&lt;/span&gt;;
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;javax.websocket.ServerEndpoint&lt;/span&gt;;
      
      &lt;span style=&quot;color:#007&quot;&gt;@ServerEndpoint&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/echo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
      &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;EchoServer&lt;/span&gt; {
      
              &lt;span style=&quot;color:#007&quot;&gt;@OnMessage&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; handleMessage(&lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; message){
                      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Thanks for the message: &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + message;
              }
      
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;colist arabic&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;L’annotation @ServerEndpoint transforme le POJO en WebSocket Endpoint, l’attribut &lt;strong&gt;value&lt;/strong&gt; est obligatoire afin de préciser l’URI d’accès à cet Endpoint&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;la méthode handleMessage sera évoquée lors de chaque message reçu&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;annotations&quot;&gt;Annotations&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;L’API met à disposition plusieurs types d’annotations afin d'être entièrement compatible avec le procotole WebSocket :&lt;/p&gt;
      &lt;/div&gt;
      &lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:100%; &quot;&gt;
      &lt;colgroup&gt;
      &lt;col style=&quot;width:50%;&quot;&gt;
      &lt;col style=&quot;width:50%;&quot;&gt;
      &lt;/colgroup&gt;
      &lt;thead&gt;&lt;tr&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Annotation&lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Rôle&lt;/th&gt;
      &lt;/tr&gt;&lt;/thead&gt;
      &lt;tbody&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@ServerEndpoint&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Déclare un Server Endpoint&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@ClientEndpoint&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Déclare un Client Endpoint&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@OnOpen&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Défini la méthode appelée pour gérer l'évenement d’ouverture de la connexion&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@OnMessage&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Défini la méthode appelée pour gérer l'évenement de réception d’un message&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@OnError&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Défini la méthode appelée pour gérer l'évenement lors d’une erreur&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;@OnClose&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Défini la méthode appelée pour gérer l'évenement de clôture de la connexion&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Les attributs de l’annotation &lt;code&gt;@ServerEndpoint&lt;/code&gt; sont les suivants :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;dlist&quot;&gt;
      &lt;dl&gt;
      &lt;dt class=&quot;hdlist1&quot;&gt;value&lt;/dt&gt;
      &lt;dd&gt;
      &lt;p&gt;URI relative ou URI template (ex: &quot;/echo&quot;, &quot;/chat/{subscriver-level}&quot;)&lt;/p&gt;
      &lt;/dd&gt;
      &lt;dt class=&quot;hdlist1&quot;&gt;decoders&lt;/dt&gt;
      &lt;dd&gt;
      &lt;p&gt;liste de noms de classes utilisées pour décoder les messages entrants&lt;/p&gt;
      &lt;/dd&gt;
      &lt;dt class=&quot;hdlist1&quot;&gt;encoders&lt;/dt&gt;
      &lt;dd&gt;
      &lt;p&gt;liste de noms de classes utilisées pour encoder les messages sortants&lt;/p&gt;
      &lt;/dd&gt;
      &lt;dt class=&quot;hdlist1&quot;&gt;subprotocols&lt;/dt&gt;
      &lt;dd&gt;
      &lt;p&gt;liste de sous-protocoles autorisés (ex: &lt;a href=&quot;http://wamp.ws)&quot;&gt;http://wamp.ws)&lt;/a&gt;&lt;/p&gt;
      &lt;/dd&gt;
      &lt;/dl&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;encoders-et-decoders&quot;&gt;Encoders et Decoders&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Comme il a été décrit plus tôt dans cet article, le serveur Endpoint peut recevoir différents types de contenu dans les messages : des données au format texte (JSON, XML…) ou au format binaire.&lt;br&gt;
      Afin de gérer efficacement les messages provenant des &lt;em&gt;peers client&lt;/em&gt; ou à destination de ceux-ci dans le code métier de l’application, il est possible de créer des classes Java de type &lt;strong&gt;Decoders et Encoders&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Quelque soit l’algorithme de transformation, il va alors être possible de transformer  :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;le POJO métier vers un flux au format désiré pour l’envoi (JSON, XML, Binaire…)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;les flux entrants dans format spécifique (JSON, XML..) vers le POJO métier&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Ainsi, le code de l’application est organisé de telle façon que la logique métier n’est pas impactée par le type et le format de flux échangés entre le &lt;em&gt;peer serveur&lt;/em&gt; et les &lt;em&gt;peers clients&lt;/em&gt;.
      Un exemple concret est présenté dans la suite de l’article.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;websocket-endpoint-client&quot;&gt;WebSocket Endpoint : Client&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;L’API propose donc également le support pour créer des Endpoints côté client en Java.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg4-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 4. Exemple de Client Endpoint en Java&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;&lt;span style=&quot;color:#007&quot;&gt;@ClientEndpoint&lt;/span&gt;
      &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;HelloClient&lt;/span&gt; {
      
              &lt;span style=&quot;color:#007&quot;&gt;@OnMessage&lt;/span&gt;
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; message(&lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; message){
                      &lt;span style=&quot;color:#777&quot;&gt;// traitement&lt;/span&gt;
              }
      }
      
      WebSocketContainer c = ContainerProvider.getWebSocketContainer();
      c.connectToServer(HelloClient.class, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;hello&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;application-us-open&quot;&gt;Application US OPEN&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;L’application exemple est déployée sous forme de WAR issue d’un projet Apache Maven.
      Outre la gestion classique du cycle de vie WebSocket, le workflow d’envoi de messages est le suivant :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;à chaque point du match, les &lt;em&gt;peers clients&lt;/em&gt; recoivent les données du match (score, service…)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;le &lt;em&gt;peer client&lt;/em&gt; peut envoyer un message pour parier sur le gagnant du match&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;à la fin du match, les &lt;em&gt;peers clients&lt;/em&gt; reçoivent un message contenant le nom du vainqueur&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Tous les messages sont échangés au format JSON.&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;L’arborescence du projet est la suivante :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg5-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 5. Structure du projet Maven&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;+ src/main/java
         |+ com.mgreau.wildfly.websocket
            |+ decoders
               |- MessageDecoder.java   &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
            |+ encoders       &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
               |- BetMessageEncoder.java
               |- MatchMessageEncoder.java
            |+ messages       &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
               |- BetMessage.java
               |- MatchMessage.java
               |- Message.java
            |- MatchEndpoint.java    &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
            |- StarterService.java   &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
            |- TennisMatch.java      &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
      + src/main/resources
      + scr/main/webapp
         |+ css
         |+ images
         |- index.html
         |- websocket.js  &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;(7)&lt;/b&gt;
      pom.xml&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;colist arabic&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Decode le message JSON provenant du &lt;em&gt;peer client&lt;/em&gt; concernant le pari sur le vainqueur en POJO (&lt;em&gt;BetMessage&lt;/em&gt;)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Encode à destination des &lt;em&gt;peers clients&lt;/em&gt;, en JSON (via JSON-P), les messages contenant le détail du match et le résultat du pari sur le vainqueur&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;POJOs représentant les types de messages échangés entre peers&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;WebSocket Server Endpoint de l’application (&lt;em&gt;peer server&lt;/em&gt;)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;EJB @Startup permettant d’initialiser l’application lors du déploiement&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;POJO pour gérer les informations du match&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;7&quot;&gt;&lt;/i&gt;&lt;b&gt;7&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Fichier Javascript pour la communication WebSocket du &lt;em&gt;peer client&lt;/em&gt; via l’API Javascript&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;d-pendances-maven-java-ee-7&quot;&gt;Dépendances Maven Java EE 7&lt;/h3&gt;
      &lt;div id=&quot;eg6-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 6. pom.xml&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;xml language-xml&quot;&gt;&lt;span style=&quot;color:#070&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
      ...
      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
              &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span&gt;UTF-8&lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span&gt;
              &lt;span style=&quot;color:#777&quot;&gt;&amp;lt;!-- Java EE 7 --&amp;gt;&lt;/span&gt;
              &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;javaee.api.version&amp;gt;&lt;/span&gt;7.0&lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/javaee.api.version&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/properties&lt;/span&gt;
      
      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
              &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax&lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;javaee-api&lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${javaee.api.version}&lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
              &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
      ...
      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;colist arabic&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;il est important d’utiliser les dépendances de la spécification Java EE 7 afin de pouvoir déployer l’application dans plusieurs serveurs d’applications Java EE sans changement de code (Wildfly, Glassfish…)&lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;cr-er-le-server-endpoint&quot;&gt;Créer le Server Endpoint&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Cet Endpoint permet de recevoir les messages concernant les paris sur le vainqueur du match et également d’envoyer aux &lt;em&gt;peers clients&lt;/em&gt; les informations du déroulement du match.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg7-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 7. Server Endpoint : MatchEndpoint.java&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;&lt;span style=&quot;color:#007&quot;&gt;@ServerEndpoint&lt;/span&gt;(
                      value = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/matches/{match-id}&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                              decoders = { MessageDecoder.class }, &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
                              encoders = { MatchMessageEncoder.class, BetMessageEncoder.class } &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                      )
      &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;MatchEndpoint&lt;/span&gt; {
      
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Logger&lt;/span&gt; logger = &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Logger&lt;/span&gt;.getLogger(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;MatchEndpoint&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
      
              &lt;span style=&quot;color:#777&quot;&gt;/* Queue for all open WebSocket sessions */&lt;/span&gt;
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Queue&lt;/span&gt;&amp;lt;Session&amp;gt; queue = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;ConcurrentLinkedQueue&lt;/span&gt;&amp;lt;&amp;gt;();
      
              &lt;span style=&quot;color:#007&quot;&gt;@OnOpen&lt;/span&gt;
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; openConnection(Session session,
                                      &lt;span style=&quot;color:#007&quot;&gt;@PathParam&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;match-id&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; matchId) {        &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                  &lt;span style=&quot;color:#777&quot;&gt;/* Register this connection in the queue */&lt;/span&gt;
                  queue.add(session);
                  session.getUserProperties().put(matchId, &lt;span style=&quot;color:#069&quot;&gt;true&lt;/span&gt;);
                  logger.log(&lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Level&lt;/span&gt;.INFO, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Connection opened for game : &lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; + matchId);
              }
      
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; send(MatchMessage msg, &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; matchId) {
                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; {
                  &lt;span style=&quot;color:#777&quot;&gt;/* Send updates to all open WebSocket sessions for this match */&lt;/span&gt;
                  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;for&lt;/span&gt; (Session session : queue) {
                    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Boolean&lt;/span&gt;.TRUE.equals(session.getUserProperties().get(matchId))){
                      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (session.isOpen()){
                            session.getBasicRemote().sendObject(msg);        &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
                            logger.log(&lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Level&lt;/span&gt;.INFO, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Score Sent: {0}&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, msg);
                      }
                    }
                  }
                } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;catch&lt;/span&gt; (&lt;span style=&quot;color:#C00;font-weight:bold&quot;&gt;IOException&lt;/span&gt; | EncodeException e) {
                  logger.log(&lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Level&lt;/span&gt;.INFO, e.toString());
                }
              }
      
              &lt;span style=&quot;color:#007&quot;&gt;@OnMessage&lt;/span&gt;
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;void&lt;/span&gt; message(&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;final&lt;/span&gt; Session session, BetMessage msg) {        &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt;
                  logger.log(&lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Level&lt;/span&gt;.INFO, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Received: Bet Match Winner - {0}&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, msg.getWinner());
                  session.getUserProperties().put(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;betMatchWinner&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, msg);
              }
      ...
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;colist arabic&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;URI pour accéder à cet Endpoint, comme le context-root de l’application est &lt;em&gt;/usopen&lt;/em&gt;, un exemple d’URL est &lt;code&gt;ws://&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/usopen/matches/1234&lt;/code&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;la classe &lt;em&gt;MessageDecoder&lt;/em&gt; permet de transformer le flux JSON entrant pour le pari sur le vainqueur en POJO &lt;em&gt;BetMessage&lt;/em&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;les 2 encodeurs permettent de transformer les POJO &lt;em&gt;MatchMessage&lt;/em&gt; et &lt;em&gt;BetMessage&lt;/em&gt; en flux JSON&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;l’annotation &lt;code&gt;@PathParam&lt;/code&gt; permet ici d’extraire l'élément de la requête WS et de passer la valeur (identifiant du match) en paramètre de la méthode, il est ainsi possible de gérer plusieurs matchs avec des clients différents pour chaque match.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Envoi du message concernant le match aux peers connectés, grâce à l'&lt;em&gt;Encoder&lt;/em&gt; il suffit de passer en paramètre un objet &lt;em&gt;MatchMessage&lt;/em&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;6&quot;&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Gestion de la réception des messages de pari sur le vainqueur du match, grâce au &lt;em&gt;Decoder&lt;/em&gt; la méthode prend en paramètre un objet &lt;em&gt;BetMessage&lt;/em&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;encoder-et-d-coder-les-messages-chang-s&quot;&gt;Encoder et Décoder les messages échangés&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Pour encoder ou décoder les messages échangés entre peers, il suffit d’implémenter l’interface adéquate selon le type de message (Texte, Binaire) et le sens de traitement (encodage, décodage), puis de redéfinir la méthode associée.&lt;br&gt;
      Dans l’exemple ci-dessous, il s’agit de l’encodeur pour le POJO MatchMessage vers le format JSON. L’API utilisée pour réaliser ce traitement est une des nouvelles API de Java EE 7 : &lt;a href=&quot;http://jcp.org/en/jsr/detail?id=353&quot;&gt;Java API for JSON Processiong (JSON-P)&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg8-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 8. src/main/java/com/mgreau/wildfly/websocket/encoders/MatchMessageEncoder.java&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;java language-java&quot;&gt;&lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;MatchMessageEncoder&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;implements&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;Encoder&lt;/span&gt;.Text&amp;lt;MatchMessage&amp;gt; {
      
              &lt;span style=&quot;color:#007&quot;&gt;@Override&lt;/span&gt;
              &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;String&lt;/span&gt; encode(MatchMessage m) &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;throws&lt;/span&gt; EncodeException {
                      &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;StringWriter&lt;/span&gt; swriter = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color:#0a5;font-weight:bold&quot;&gt;StringWriter&lt;/span&gt;();
                      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; (JsonWriter jsonWrite = Json.createWriter(swriter)) {
                              JsonObjectBuilder builder = Json.createObjectBuilder();
                              builder.add(
                                      &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;match&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
                                      Json.createObjectBuilder()
                                              .add(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;serve&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, m.getMatch().getServe())
                                              .add(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;title&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, m.getMatch().getTitle())
                                              ...
                              }
      
                              jsonWrite.writeObject(builder.build());
                      }
                      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; swriter.toString();
              }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;client-web-html5&quot;&gt;Client Web HTML5&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;L’unique page HTML de cette application charge le fichier &lt;strong&gt;websocket.js&lt;/strong&gt; pour mettre en oeuvre l’API Javascript WebSocket et ainsi intéragir avec le Server Endpoint Java.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;eg9-callouts&quot; class=&quot;exampleblock&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;Example 9. API Javascript : websocket.js&lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay nowrap&quot;&gt;&lt;code class=&quot;javascript language-javascript&quot;&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;var&lt;/span&gt; wsUrl;
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (window.location.protocol == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;https:&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) {  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
              wsUrl = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;wss://&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + window.location.host + &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;:8443/usopen/matches/1234&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
      } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt; {
              wsUrl = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ws://&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt; + window.location.host + &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;:8000/usopen/matches/1234&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
      }
      
      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;createWebSocket&lt;/span&gt;(host) {
              &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (!window.WebSocket) {    &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
              ...
              } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt; {
                      socket = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;new&lt;/span&gt; WebSocket(host);   &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
                      socket.&lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onopen&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;() {
                              document.getElementById(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;m1-status&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).innerHTML = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;CONNECTED...&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
                      };
                      socket.&lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onclose&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;() {
                              document.getElementById(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;m1-status&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;).innerHTML = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;FINISHED&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;
                      };
                      ...
                      socket.&lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;onmessage&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(msg) {
                              &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt; {
                                      console.log(data);
                                      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;var&lt;/span&gt; obj = JSON.parse(msg.data);     &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;
                                      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (obj.hasOwnProperty(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;match&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)){   &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
                                              &lt;span style=&quot;color:#777&quot;&gt;//title&lt;/span&gt;
                                              m1title.innerHTML = obj.match.title;
                                              &lt;span style=&quot;color:#777&quot;&gt;// comments&lt;/span&gt;
                                              m1comments.value = obj.match.comments;
                                              &lt;span style=&quot;color:#777&quot;&gt;// serve&lt;/span&gt;
                                              &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (obj.match.serve === &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;player1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
                                                      m1p1serve.innerHTML = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;S&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
                                                      m1p2serve.innerHTML = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
                                              } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt; {
                                                      m1p1serve.innerHTML = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
                                                      m1p2serve.innerHTML = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;S&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
                                              }
                                              ..
                                      }
                                      ...
                              } &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;catch&lt;/span&gt; (exception) {
                                      data = msg.data;
                                      console.log(data);
                              }
                      }
              }
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;colist arabic&quot;&gt;
      &lt;table&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Choix du protocole WS selon le type de protocole HTTP utilisé (sécurisé ou non)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Test du support par le navigateur de l’API WebSocket&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Création du WebSocket&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Sur l’Event-Handler &lt;code&gt;onmessage&lt;/code&gt; , traitement du flux JSON reçu via le &lt;em&gt;peer serveur&lt;/em&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;
      &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;
      &lt;/td&gt;
      &lt;td&gt;Test du type d’objet reçu (Match ou Pari) afin de réaliser le traitement adéquat avec le DOM&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Pour savoir quels sont les &lt;strong&gt;navigateurs compatibles avec l’API WebSocket&lt;/strong&gt;, &lt;a href=&quot;http://caniuse.com/#search=websocket&quot;&gt;consultez le site caniuse.com&lt;/a&gt;. Aujourd’hui, les dernières versions des navigateurs sont compatibles exceptées pour Opéra mini et Android Browser, qui représentent, à eux deux, seulement 3% du traffic web.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;sources-de-l-exemple-sur-github&quot;&gt;Sources de l’exemple sur Github&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Vous pouvez &lt;strong&gt;forker le code sur Github&lt;/strong&gt; à l’URL &lt;code&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/mgreau/javaee7-websocket&quot;&gt;https://github.com/mgreau/javaee7-websocket&lt;/a&gt;&lt;/strong&gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Cette application exemple est très basique, les idées d’améliorations possibles sont nombreuses : gérer un tournoi avec plusieurs matchs, parier sur d’autres critères, voir en live les paris des autres internautes…&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;Une feature, qui serait particulièrement intéressante techniquement, serait de créer un nouveau type de pari sur &lt;strong&gt;la zone de terrain des points gagnants&lt;/strong&gt;. Il suffit de dessiner le terrain grâce à l’API HTML5 Canvas et de gérer les coordonnées de l’emplacement cliqué par l’internaute (comme zone gagnante) puis de les comparer aux coordonnées réelles lors d’un point gagnant.&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;construire-et-d-ployer-le-war&quot;&gt;Construire et Déployer le WAR&lt;/h3&gt;
      &lt;div class=&quot;admonitionblock important&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Pré-requis :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;JDK 7&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Apache Maven 3.0.4+&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Serveur d’applications Java EE 7 : Wildfly 8 ou Glassfish 4&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Pour créer l’archive WAR, il suffit d’executer la commande Apache Maven ci-dessous ;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;mvn clean package&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Si vous utilisez Wildfly, le déploiement est automatique (le serveur doit être démarré) avec la commande ci-dessous :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;mvn jboss-as:deploy&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Il suffit ensuite d’accéder à l’URL : &lt;a href=&quot;http://localhost:8080/usopen/&quot;&gt;http://localhost:8080/usopen/&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;performances-websocket-vs-rest&quot;&gt;Performances : WebSocket vs REST&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Afin d’avoir des métriques concernant les performances de ce nouveau protocole, Arun Gupta a developpé &lt;a href=&quot;https://github.com/arun-gupta/javaee7-samples/tree/master/websocket/websocket-vs-rest&quot;&gt;une application qui permet de comparer les temps d’execution&lt;/a&gt; d’un même traitement réalisé avec du code développé en utilisant les technologies WebSocket et REST.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Les 2 endpoints de l’application (REST Endpoint et WebSocket Endpoint) ne font que renvoyer le flux qu’ils recoivent. L’interface Web de cette application permet de définir la taille du message et le nombre de fois que ce message doit être envoyé avant la fin du test.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Les résultats de ses tests, présentés ci-dessous, sont éloquents :&lt;/p&gt;
      &lt;/div&gt;
      &lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:100%; &quot;&gt;
      &lt;colgroup&gt;
      &lt;col style=&quot;width:33%;&quot;&gt;
      &lt;col style=&quot;width:33%;&quot;&gt;
      &lt;col style=&quot;width:33%;&quot;&gt;
      &lt;/colgroup&gt;
      &lt;thead&gt;&lt;tr&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Type de Requête&lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Temps execution&lt;br&gt;&lt;strong&gt;REST Endpoint&lt;/strong&gt;
      &lt;/th&gt;
      &lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Temps execution&lt;br&gt;&lt;strong&gt;WebSocket Endpoint&lt;/strong&gt;
      &lt;/th&gt;
      &lt;/tr&gt;&lt;/thead&gt;
      &lt;tbody&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Envoi de 10 messages de 1 byte&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;220 ms&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7 ms&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Envoi de 100 messages de 10 bytes&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;986 ms&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;57 ms&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Envoi de 1000 messages de 100 bytes&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10 210 ms&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;179 ms&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Envoi de 5000 messages de 1000 bytes&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;54 449 ms&lt;/p&gt;&lt;/td&gt;
      &lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1202 ms&lt;/p&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;r-f-rences-pour-tout-savoir-sur-les-websocket&quot;&gt;Références pour tout savoir sur les WebSocket&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Je vous recommande plus particulièrement les conférences d' &lt;a href=&quot;https://twitter.com/arungupta&quot;&gt;Arun Gupta&lt;/a&gt;, qui vous permettent, en moins d’1 heure, de tout connaître/comprendre sur la technologie WebSocket en général et sur l’API Java en particulier.&lt;br&gt;
      Pour des informations plus avancées, l’idéal reste les spécifications IETF, W3C et Java.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist bibliography&quot;&gt;
      &lt;ul class=&quot;bibliography&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc6455&quot;&gt;RFC 6455: The WebSocket Protocol&lt;/a&gt; - &lt;em&gt;Spécification IETF&lt;/em&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://w3.org/TR/websockets/&quot;&gt;W3C: The WebSocket API&lt;/a&gt; - &lt;em&gt;Spécification W3C&lt;/em&gt; (Candidate Recommandation)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=356&quot;&gt;JSR 356: Java API for WebSocket Protocol&lt;/a&gt; - &lt;em&gt;Spécification Java&lt;/em&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://glassfish.java.net/adoptajsr/jsr356.html&quot;&gt;Adopt a JSR - JSR 356&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=QqbuDFIT5To&quot;&gt;Java EE 7 &amp;amp; WebSocket API&lt;/a&gt; - &lt;em&gt;Conférence Arun Gupta SF&lt;/em&gt; (à partir de la 46e minute)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.parleys.com/play/51c1cceae4b0ed8770356828/chapter4/about&quot;&gt;Getting Started with WebSocket and SSE&lt;/a&gt; - &lt;em&gt;Conférence Arun Gupta Devoxx UK 2013&lt;/em&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;Cet article a été structuré en se basant sur la conférence Devoxx UK 2013.&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Cet article a introduit, grâce à un exemple concret, &lt;strong&gt;le protocole WebSocket, l’API WebSocket HTML5 et l’API Java pour les WebSocket sortie avec Java EE 7&lt;/strong&gt;. Il était déjà possible d’utiliser les WebSocket en Java grâce à des frameworks comme Atmosphere mais il manquait un standard.&lt;br&gt;
      Aujourd’hui tous &lt;strong&gt;les standards sont finalisés ou en passe de l'être&lt;/strong&gt;, cette nouvelle technologie répond à un besoin précis et est prometteuse en terme de performance. Pour qu’elle soit massivement utilisée, il faudra tout de même que ce protocole soit autorisée dans les entreprises là où bien souvent seul le protocole HTTP est disponible.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://mgreau.github.io/posts/2013/08/26/xstream-and-JBossEAP6.html</id>
    <title>XStream on EAP 6 with Sun14ReflectionProvider</title>
    <updated>2013-10-21T00:13:49+02:00</updated>
    <published>2013-08-26T00:00:00+00:00</published>
    <link href="http://mgreau.github.io/posts/2013/08/26/xstream-and-JBossEAP6.html" rel="alternate" type="text/html" />
    <author>
      <name>Maxime Gréau</name>
    </author>
    <category term="jboss-eap"></category>
    <category term="xstream"></category>
    <summary>
      
      
      
      If you want to use the Sun14ReflectionProvider with XStream, you have to add a dependency to the "sun.jdk" module.
      
      
      pass::[more]
      
      
      
      &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;module xmlns=&quot;urn:jboss:module:1.0&quot; name=&quot;mymodule&quot;&gt;&#10;  ...&#10;  &lt;dependencies&gt;&#10;    &lt;module name=&quot;sun.jdk&quot; /&gt;&#10;  &lt;/dependencies&gt;&#10;&lt;/module&gt;
      
      
      
      ...
    </summary>
    <content type="html">
      &lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you want to use the Sun14ReflectionProvider with XStream, you have to add a dependency to the &quot;sun.jdk&quot; module.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;pass::[more]&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;xml language-xml&quot;&gt;&lt;span style=&quot;color:#579&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;module&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;xmlns&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;urn:jboss:module:1.0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;mymodule&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070&quot;&gt;&amp;gt;&lt;/span&gt;
        ...
        &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
          &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;module&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;sun.jdk&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#070&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
      &lt;span style=&quot;color:#070&quot;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://mgreau.github.io/posts/2013/04/24/yahoomail-gmail-user-experience.html</id>
    <title>Yahoo! Mail, t&#8217;es une messagerie, t&#8217;as pas de conversation ? non mais allô quoi !</title>
    <updated>2013-10-21T00:13:49+02:00</updated>
    <published>2013-04-24T00:00:00+00:00</published>
    <link href="http://mgreau.github.io/posts/2013/04/24/yahoomail-gmail-user-experience.html" rel="alternate" type="text/html" />
    <author>
      <name>Maxime Gréau</name>
    </author>
    <category term="yahoomail"></category>
    <category term="gmail"></category>
    <summary>
      
      
      
      
      
      
      
      
      
      Cet article expose mon point de vue sur l&#8217;ergonomie, l&#8217;expérience utilisateur et les services rendus (ou pas) à l&#8217;internaute par Yahoo! Mail et Gmail. Je me base sur l&#8217;expérience de mon utilisation de Yahoo! Mail depuis 14 ans et de Gmail depuis 7 ans.
      
      
      
      
      
      pass::[more]
      
      
      TIME: 15mn
      
      
      Alors que Gmail vient de fêter, au début du mois, ses 9 ans d&#8217;existence, Yahoo! a sorti fin 2012 la dernière version de Yahoo! Mail créé en 1997. C&#8217;est l''occasion de faire un bilan de ces 2 acteurs principaux sur ce marché du webmail gratuit (Il ne sera pas question du 3e acteur, Hotmail, car je...
    </summary>
    <content type="html">
      &lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      Cet article expose mon point de vue sur l’ergonomie, l’expérience utilisateur et les services rendus (ou pas) à l’internaute par Yahoo! Mail et Gmail. Je me base sur l’expérience de mon utilisation de Yahoo! Mail depuis 14 ans et de Gmail depuis 7 ans.
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;pass::[more]&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;TIME: 15mn&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Alors que &lt;a href=&quot;http://www.google.com/mail/help/intl/fr/about.html&quot;&gt;Gmail&lt;/a&gt; vient de fêter, au début du mois, &lt;a href=&quot;http://gmailblog.blogspot.fr/2013/04/gmail-9-years-and-counting.html&quot;&gt;ses 9 ans d’existence&lt;/a&gt;, Yahoo! a sorti fin 2012 la dernière version de Yahoo! Mail créé en 1997. C’est l''occasion de faire un bilan de ces 2 acteurs principaux sur ce marché du webmail gratuit (Il ne sera pas question du 3e acteur, Hotmail, car je ne l’ai jamais testé). Il faut savoir que ces 3 acteurs revendiquent &lt;strong&gt;chacun plus de 280 millions d’utilisateurs&lt;/strong&gt; dans le monde !&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://mgreau.github.io/images/posts/Gmail_yahoo_logo.png&quot; alt=&quot;Logos Yahoo!Mail Gmail&quot;&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Il existe déjà un certain nombre de comparatifs de ces 2 webmails mais ils se focalisent trop souvent sur des éléments tels que le nombre de Gigas d’espace ou les protocoles activés… et pas sur les éléments importants d’une boîte de messagerie dans un navigateur à savoir : &lt;strong&gt;les fonctionnalités de base disponibles et l’expérience utilisateur associée&lt;/strong&gt;.
      Autrement dit, comment faire pour nous rendre la vie la plus simple possible sur les principales actions que nous réalisons tous (geek ou novice) chaque jour : écrire un mail, lire un mail, répondre, faire suivre, envoyer une pièce jointe, rechercher dans nos messages…&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
      &lt;div id=&quot;toctitle&quot;&gt;Table des matières de l'article&lt;/div&gt;
      &lt;ul class=&quot;sectlevel1&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#yahoo-mail-une-messagerie-rest-e-dans-les-ann-es-90&quot;&gt;Yahoo! Mail, une messagerie restée dans les années 90&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;
      &lt;ul class=&quot;sectlevel2&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#des-mauvais-choix-techniques-et-ergonomiques&quot;&gt;Des mauvais choix techniques et ergonomiques&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#le-mode-conversation-une-fonctionnalit-indispensable&quot;&gt;Le mode &quot;Conversation&quot; : une fonctionnalité indispensable !&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#des-options-qui-font-la-diff-rence&quot;&gt;Des options qui font la différence&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;
      &lt;ul class=&quot;sectlevel2&quot;&gt;
      &lt;li&gt;&lt;a href=&quot;#oups-avec-la-pi-ce-jointe-c-est-mieux&quot;&gt;Oups, avec la pièce jointe c’est mieux :-)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#trop-tard-j-ai-cliqu&quot;&gt;Trop tard, j’ai cliqué !&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#il-est-rang-o-d-j-ce-mail-si-si-je-l-ai-quelque-part&quot;&gt;Il est rangé où déjà ce mail ? si si je l’ai quelque part !&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tout-message-est-d-abord-un-brouillon&quot;&gt;Tout message est d’abord un brouillon !&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mais-encore&quot;&gt;Mais encore&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#du-renouveau-avec-la-nouvelle-ceo-marissa-mayer-venue-de-google&quot;&gt;Du renouveau avec la nouvelle CEO Marissa Mayer ?…venue de Google :)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#merci-gmail-une-r-volution-en-2013-pour-yahoo-mail&quot;&gt;Merci Gmail. Une révolution en 2013 pour Yahoo! Mail ?&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;yahoo-mail-une-messagerie-rest-e-dans-les-ann-es-90&quot;&gt;Yahoo! Mail, une messagerie restée dans les années 90&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Depuis 1999 et la création de mon adresse mail &lt;a href=&quot;http://yahoo.fr/&quot;&gt;@yahoo.fr&lt;/a&gt;, j’ai beau cherché, je ne vois pas de réelle évolution réalisée par Yahoo! pour sa messagerie si populaire. Je parle évidemment en terme de fonctionnalités pour l’utilisateur (même si en terme technique au niveau de l’interface Web on peut presque en dire autant). C’est vrai, à part les modifications &quot;standards&quot; liées aux évolutions des technologies Web, je ne vois pas ce que Yahoo! Mail a apporté de nouveau à ce jour.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;des-mauvais-choix-techniques-et-ergonomiques&quot;&gt;Des mauvais choix techniques et ergonomiques&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Yahoo! Mail n’a cessé de prendre les mauvaises décisions pour son produit phare ! Heureusement que son public est en partie composé (je présume) de personnes qui n’osent pas passer le cap de changer de client de messagerie par peur du changement justement; sinon Yahoo! Mail aurait fermé depuis longtemps.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Sa première version &quot;classique&quot; est celle que j’ai gardé le plus longtemps même (et surtout) après la première version &quot;Web 2.0&quot;.  Cette première version &quot;Web 2.0&quot; entièrement réalisée à base de composants Javascript se voulait une simulation, dans un navigateur Web, d’un client de messagerie installé localement sur le système d’exploitation (type Outlook ou Thunderbird) . Double erreur ! Tout d’abord techniquement cette version n'était vraiment pas au point ! Un temps d’initialisation interminable dans les premières versions du au chargement de la majorité des messages (et de leur contenu ?) avant le premier clic de l’utilisateur.  Je ne vous parle même pas du &quot;déroulement de souris&quot; dans la boîte de réception qui vous affichait un sablier pendant un temps infini. Ensuite côté ergonomie, elle simulait une version &quot;client local&quot; sans l’exhaustivité des fonctionnalités et ajouté aux temps de réponses intolérables, le résultat : une frustration générale.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;le-mode-conversation-une-fonctionnalit-indispensable&quot;&gt;Le mode &quot;Conversation&quot; : une fonctionnalité indispensable !&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Vous avez sûrement des amis ou de la famille avec qui vous échangez des mails pour une fête, un anniversaire…et vous vous retrouvez avec 20 mails dans votre messagerie car tout le monde répond à l’ensemble des destinataires. Sur Yahoo! Mail ça donne &lt;strong&gt;20 lignes dans votre Boite de Réception avec comme sujet &quot;Re:Re:Re:Re:Re:Re:Re:Re:Re:Re:Re:Re:Re:Re:Re:Cadeau Anniversaire Jean-Michel&quot;&lt;/strong&gt;
      Quel est l’intérêt d’avoir autant d’espace pris sur votre écran pour une discussion avec des réponses du type &quot;OK pour moi&quot; ? Si, en plus, vous avez plusieurs discussions différentes de ce type dans votre Boîte de réception, il devient impossible de retrouver le fil rapidement.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;yahoo-rere&quot; class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://mgreau.github.io/images/posts/yahoo_rerere.png&quot; alt=&quot;Yahoo! Re:re:re&quot;&gt;
      &lt;/div&gt;
      &lt;div class=&quot;title&quot;&gt;Figure 1. Exemple de discussion avec 1 ligne pour chaque message avec des &quot;Re: Re: Re: Re: Re: Re: Re:&quot;&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Depuis longtemps dans Gmail  vous avez par défaut le &lt;strong&gt;mode conversation activé&lt;/strong&gt; qui vous permet d’avoir une &lt;strong&gt;seule ligne pour toute la conversation&lt;/strong&gt; puis d’afficher le détail et le déroulement de la conversation à plusieurs lors du clic sur cette discussion. Ainsi, vous suivez beaucoup plus facilement le fil de discussion et l'écran principal de votre boîte de réception est épuré de tous ces messages.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;gmail_discussion&quot; class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://mgreau.github.io/images/posts/gmail_discussion.png&quot; alt=&quot;Gamil discussion&quot;&gt;
      &lt;/div&gt;
      &lt;div class=&quot;title&quot;&gt;Figure 2. Même type de discussion avec Gmail et le mode conversation : 1 ligne dans la boîte de réception puis le détail lors du clic&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;C’est pour moi une &lt;strong&gt;fonctionnalité majeure, indispensable vu le nombre de mails envoyés aujourd’hui quotidiennement&lt;/strong&gt; &lt;a href=&quot;http://www.arobase.org/culture/chiffres-email.htm&quot;&gt;39 milliards en 2007 de personne à personne)&lt;/a&gt; comparé à 10 ans en arrière. Cette option peut tout de même être désactivée pour les personnes réfractèrent à ce mode de lecture des discussions.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;des-options-qui-font-la-diff-rence&quot;&gt;Des options qui font la différence&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;90% des fonctionnalités d’un webmail sont communes à tous ceux qui proposent un logiciel de ce type. Il faut donc &lt;strong&gt;faire la différence sur les 10% restants&lt;/strong&gt;. Et là que propose Yahoo! Mail de plus que les autres, que le standard ?…pas grand chose…j’ai même envie de dire RIEN ! Des exemples ? En voici quelques-uns,  ce n’est bien sûr pas vital mais ce sont des petits plus très pratiques que l’on se doit d’attendre d’une multi-nationale comme Yahoo!, &lt;a href=&quot;http://news.cnet.com/8301-1023_3-57543177-93/gmail-edges-hotmail-as-worlds-top-e-mail-service/&quot;&gt;encore leader de la messagerie Web aux Etats-Unis fin 2012&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;oups-avec-la-pi-ce-jointe-c-est-mieux&quot;&gt;Oups, avec la pièce jointe c’est mieux :-)&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Vous devez avoir souri en lisant ce titre, non ? Combien de fois cela vous est-il arrivé ? J’ai plutôt envie de vous demander : &quot;&lt;strong&gt;Cela fait combien d’années que cela vous est arrivé pour la première fois ? 5 ans ? 10 ans ?&lt;/strong&gt;&quot;. Et depuis, toujours rien de nouveau. Pourtant, techniquement ce n’est vraiment pas compliqué d’essayer de limiter ce genre d’erreur et &lt;strong&gt;donc d’aider l’utilisateur&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Clairement, soit vous envoyez une pièce jointe directement sans écrire de texte dans le contenu du message et là le risque d’erreur est quasi nul, soit vous saisissez un texte avant et c’est à ce moment là que l’oubli peut se produire.
      Dans ce deuxième cas, il y a de (très) fortes chances que vous fassiez référence au fait que vous allez envoyer une pièce jointe, non ? Il suffit donc d’analyser le contenu du message saisi avant l’envoi du mail à la recherche de mots clés tels que &quot;pièce jointe&quot;, &quot;pj&quot;, &quot;fichier joint&quot;… et de prévenir l’utilisateur qu’il a peut-être oublié quelque-chose.
      Gmail propose d’activer cette fonctionnalité et vous préviens par une boîte de dialogue lors de la tentative d’envoi du message :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;gmail_oups_pj&quot; class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://mgreau.github.io/images/posts/gmail_oups_pj.png&quot; alt=&quot;Gmail Oups PJ&quot;&gt;
      &lt;/div&gt;
      &lt;div class=&quot;title&quot;&gt;Figure 3. Boîte de dialogue pour vous prévenir que vous avez peut-être oublié la pièce jointe&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Pour ceux qui mettraient en avant le fait que Gmail analyse ici le contenu de vos messages, sachez que lorsque vous faîtes vos courses en magasin, vôtre parcours est analysé à votre insu par les caméras afin d’optimiser par la suite la vente des produits. Ne pensez donc pas que le fait que Yahoo! Mail ne propose pas cette fonctionnalité signifie qu’il n’analyse pas le contenu de vos messages également.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;trop-tard-j-ai-cliqu&quot;&gt;Trop tard, j’ai cliqué !&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Combien de fois vous vous êtes dit après avoir cliqué sur le bouton ENVOYER : &quot;Mince! il y avait qui en copie ??&quot; ou &quot;Arg, j’ai oublié machin et truc&quot; ou encore &quot;Zut, je voulais écrire ça aussi&quot;. Trop tard ??? Non, pas avec Gmail !
      Et oui, quand on y pense, qu’est-ce que ça peut bien vous faire que votre message soit envoyé sur les serveurs destinataires *immédiatement après votre clic ou 5 secondes plus tard *(à part dans les services informatiques où les collègues entrent dans le bureau en disant &quot;je viens de t’envoyer un mail il y a 2 secondes, tu l’as reçu ?!?&quot; ). Vous ne maîtrisez de toute façon pas le chemin et le temps que va prendre votre message dans &quot;le Cloud&quot; pour se rendre à destination, et vous maîtrisez encore moins le moment où votre destinataire va être disponible pour lire votre message.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Gmail propose donc une option à activer qui permet de &lt;strong&gt;réellement envoyer le message après un délai paramètrable en secondes&lt;/strong&gt;. Ainsi, si vous décidez que votre mail sera réellement envoyé 5 secondes après votre action d’envoi, vous aurez la possibilité de cliquer sur un lien &quot;Annuler&quot; pendant ce laps de temps. Sans action de votre part, le mail est envoyé automatiquement après 5 secondes, c’est donc totalement transparent pour vous sauf quand vous en avez besoin, génial non ? Encore une fois, il n’y a rien d’extraordinaire techniquement derrière ça, &lt;strong&gt;c’est simple, activable ou non par l’utilisateur et ça peut empêcher des désagréments importants&lt;/strong&gt; (l’oubli que le chef était en copie….)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;gmail_annuler_envoi&quot; class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://mgreau.github.io/images/posts/gmail_annuler_envoi.png&quot; alt=&quot;Gmail Annuler Envoi&quot;&gt;
      &lt;/div&gt;
      &lt;div class=&quot;title&quot;&gt;Figure 4. Vous avez un délai pour cliquer sur &quot;Annuler&quot; afin de ne pas envoyer le mail, passé ce délai le message est automatiquement réellement envoyé&lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;il-est-rang-o-d-j-ce-mail-si-si-je-l-ai-quelque-part&quot;&gt;Il est rangé où déjà ce mail ? si si je l’ai quelque part !&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Vous avez sûrement déjà utilisé Microsoft Windows, là où on organise ses fichiers dans une arborescence de dossiers et donc si un document répond à plusieurs thèmes, il faut choisir un des dossiers ou dupliquer le document en question ou encore créer un raccourci. Et bien Yahoo! Mail fonctionne comme ça encore aujourd’hui (sans l’option raccourci) !! On déplace donc un mail dans un dossier, du coup il n’est plus dans la boîte de réception. La boîte de réception est donc un dossier comme les autres et &lt;strong&gt;un message ne peut apparaître que dans un seul dossier.&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Avec Gmail  tout est géré avec la &lt;strong&gt;notion de &quot;libellé&quot; et non pas de dossier&lt;/strong&gt;. Ainsi chaque message est associé à un ou plusieurs libellés, il est donc possible de d’associer le message a des libellés tout en le gardant dans la boîte de réception (qui est un libellé particulier) ou de l’archiver (autre libellé) pour ne pas qu’il perturbe la boîte de réception. Les libellés peuvent être imbriqués et ils sont personnalisables graphiquement (couleur, police) pour mieux repérer rapidement les messages associés à ces libellés. On peut ensuite réaliser des recherches uniquement sur certains libellés. Bref, on peut faire au minimum la même chose qu’avec les dossier Yahoo! Mail mais surtout on dispose de 10 fois plus de possibilités pour organiser nos messages et donc les retrouver facilement.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;gmail_nested-labels&quot; class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://mgreau.github.io/images/posts/nested-labels.png&quot; alt=&quot;Gmail Labels&quot;&gt;
      &lt;/div&gt;
      &lt;div class=&quot;title&quot;&gt;Figure 5. Gestion des labels Gmail&lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;tout-message-est-d-abord-un-brouillon&quot;&gt;Tout message est d’abord un brouillon !&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Avec Gmail, lorsque vous commencez à écrire un mail, c’est-à-dire que vous avez débuté votre saisie de texte, automatiquement (sans action de votre part) votre message est un brouillon enregistré qui disparaîtra dès l’envoi du mail ou qui vous fera une sauvegarde si votre PC s'éteint ou votre navigateur plante violemment (si si ça arrive souvent dans ces moments là). Sur Yahoo! Mail, il faut faire la première démarche de dire &quot;Oui je veux l’enregistrer comme brouillon&quot; pour qu’ensuite il se comporte comme Gmail ou attendre 5 minutes pour qu’il le fasse automatiquement.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Il faut s’interroger, combien de fois vous vous dîtes : &quot;Tiens je vais écrire un brouillon&quot;, Non la majorité du temps, vous écrivez un message qui, s’il n’est pas envoyé dans la foulée pour des raisons X ou Y, doit être enregistré sans une action de votre part, c’est implicite. C’est comme si vous commenciez un message sur un bout de papier pour votre femme, que vous entendez votre enfant pleurer dehors car il est tombé de la balançoire, vous revenez 20 minutes plus tard pour finir votre message…et là plus rien !! Parce qu’avant de partir en courant, vous n’avez pas dit &quot;Attends, enregistre mon travail avant que je revienne&quot;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;mais-encore&quot;&gt;Mais encore&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Ce sont &lt;strong&gt;quelques exemples parmi tant d’autres&lt;/strong&gt; : Gmail propose aussi une sécurité renforcée avec la validation en 2 étapes lors de la connexion à votre compte (un code temporaire, reçu par sms, est demandé après le mot de passe) ou encore la proposition automatique de destinataires souvent utilisés lors de l’écriture d’un mail à destination de plus de 2 personnes… Google met donc à disposition de l’utilisateur une liste très intéressante de fonctionnalités qu’il est toujours possible de désactiver si elles ne nous satisfont pas.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;du-renouveau-avec-la-nouvelle-ceo-marissa-mayer-venue-de-google&quot;&gt;Du renouveau avec la nouvelle CEO Marissa Mayer ?…venue de Google :)&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Il y a longtemps que je souhaite écrire cet article et, depuis, une &lt;a href=&quot;http://yodel.yahoo.com/blogs/product-news/introducing-yahoo-mail-12773.html&quot;&gt;nouvelle version de Yahoo! Mail est sortie fin 2012&lt;/a&gt;. Cette annonce correspond à la première version depuis l’arrivée à la tête de Yahoo! d’une ex-employée de Google, &lt;a href=&quot;http://fr.wikipedia.org/wiki/Marissa_Mayer&quot;&gt;Marissa Mayer&lt;/a&gt;. Dans cette nouvelle version, on perçoit immédiatement une volonté d’aller dans le sens du renouveau : &lt;strong&gt;simplifier et épurer l’interface pour la rendre plus intuitive et optimiser la rapidité de fonctionnement&lt;/strong&gt;. Après quelques jours d’utilisation (pour cet article justement), je peux confirmer que c’est la meilleure version de Yahoo! Mail que j’ai utilisé depuis… Yahoo! Mail classique.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Mais, on peut aussi noter, à juste titre, que dans cette annonce &lt;strong&gt;il n’y a aucune nouvelle fonctionnalité d’annoncée !&lt;/strong&gt; Peut-être pour la prochaine version ? Il faudra tout d’abord rattraper le retard sur les fonctionnalités majeures indispensables en 2013. Cela a commencé avec &lt;a href=&quot;http://yodel.yahoo.com/blogs/product-news/yahoo-mail-dropbox-team-attachments-easier-13210.html&quot;&gt;l’association récente de Yahoo! Mail avec Dropbox&lt;/a&gt; là où &lt;a href=&quot;http://gmailblog.blogspot.fr/2012/11/gmail-and-drive-new-way-to-send-files.html&quot;&gt;Gmail propose l’utilisation de Google Drive depuis fin 2012&lt;/a&gt; pour la gestion des pièces jointes volumineuses.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;merci-gmail-une-r-volution-en-2013-pour-yahoo-mail&quot;&gt;Merci Gmail. Une révolution en 2013 pour Yahoo! Mail ?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;J’ai (volontairement) été un peu dur avec Yahoo! Mail dans cet article mais cela vient de ma frustration de voir comment cette messagerie utilisée par autant de personnes (280 millions fin 2012) et gérée par une société aussi importante que Yahoo! peut avoir si peu évoluée au fil des années. Cette impression qu’aucun bon choix n’ait été fait après la version &quot;classique&quot;. Je suis peut-être aussi influencé par mon métier qui fait que je me soucie de choses auxquelles la majorité des utilisateurs ne prêtent guère attention. Les éventuels commentaires qui suivront ce post m'éclairciront sûrement sur ces points. Seulement quand je voie les efforts réalisés par Google avec Gmail pour inventer de nouvelles fonctionnalités, je me dis que nous les utilisateurs pourrions avoir encore davantage de possibilités si la concurrence était plus accrue.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;J’ai l’impression que la stratégie de Marissa Mayer va dans ce sens : améliorer l’expérience utilisateur des internautes qui utilisent massivement ce service.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Vous l’avez certainement compris, &lt;strong&gt;après avoir commencé avec Yahoo! Mail, je suis devenu pro-Gmail&lt;/strong&gt; depuis quelques années maintenant mais je ne désespère pas de voir Yahoo! Mail s’améliorer. D’ailleurs, je leur propose un exemple d’ajout de fonctionnalité dans la version gratuite de leur webmail : l’accusé de lecture.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;L’accusé de réception c’est bien, mais il est demandé lors du clic sur le sujet d’un message donc il permet de confirmer à l’expéditeur que le message est bien arrivé à destination (en gros de valider le fonctionnement des serveurs de messagerie !) mais le plus intéressant pour un utilisateur est d'être averti que le destinataire a bien pris connaissance du contenu du message envoyé; donc il est plus judicieux de proposer une action du style &quot;Confirmer la lecture ?&quot; à l’utilisateur lorsqu’il a potentiellement lu le message en entier (en bas de l’écran) ou lorsqu’il quitte le message (retour à la boite de réception…).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Au passage donc, &lt;strong&gt;Merci aux équipes de Google&lt;/strong&gt; pour leur travail assez exceptionnel tout de même, et allez &lt;strong&gt;Yahoo! Mail, faites nous quelque chose de nouveau&lt;/strong&gt; !! Ajoutez une fonctionnalité qui n’existe pas encore chez vos concurrents. Il est évident qu’il reste encore plein de choses à proposer aux internautes pour les aider dans l’utilisation quotidienne de leurs mails, des petites choses souvent simples mais efficaces.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Liens référencés dans cette article :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Gmail Blog officiel : &lt;a href=&quot;http://www.google.com/mail/help/intl/fr/about.html&quot;&gt;http://www.google.com/mail/help/intl/fr/about.html&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Yahoo! Mail Blog officiel :&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Marissa Mayer :&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Gmail, 9 ans :&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Yahoo! Mail :&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Yahoo! Mail et Dropbox :&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Gmail et Google Drive :&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Le nouveau Yahoo! Mail :&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Yahoo! Mail n°1 aux USA :&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Email en chiffres :&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Les labels Gmail :&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://mgreau.github.io/posts/2012/11/30/jboss-eap-43-51-6-java-ee-supported.html</id>
    <title>JBoss EAP 4.3 / 5.1 / 6 - Java EE supported standards in each EAP releases</title>
    <updated>2013-12-10T16:22:41+01:00</updated>
    <published>2012-11-30T00:00:00+00:00</published>
    <link href="http://mgreau.github.io/posts/2012/11/30/jboss-eap-43-51-6-java-ee-supported.html" rel="alternate" type="text/html" />
    <author>
      <name>Maxime Gréau</name>
    </author>
    <category term="jboss-eap"></category>
    <category term="javaee"></category>
    <category term="jsr"></category>
    <summary>
      
      
      
      
      
      
      
      
      
      Language EN / Timereading 5 mn
      
      
      
      
      
      
      
      
      
      
      
      This post presents, as a diagram, all Java EE standards supported in each JBoss EAP version :
      
      
      
      This diagram was updated in December 2013 (fixes and addition of (*) information)
      
      
      Thanks to Arun Gupta for the fixes
      
      
      The following data are based on official documentation from Oracle (JSR) and Red Hat (EAP).
      
      
      
      
      
      
      
      
      pass::[more]
      
      
      You can click on each component to access the Java Specification Requests (JSRs) details or move to the complete lists.
      
      7V1tc+I4Ev41qbrbqqGsF0v2R4aEvZ3aqU1t5m72qwMOeJZgzphNZn/9Sn7DLYlXGeN4wlRlQAYbWo+7n251q2/I6Pn15yRYzT/H03Bxg53p6w25vcHYcxzxVw58VwZmSTTNh1AxsImm4RoMpXG8SKMVHJzEy2U4ScHYU7yAJ1sFs1AbeJgEC330azRN58WXw2w7/p8wms3LyyDm50fW6ffyHNPwKdgs0g/ZEM4PvzrFmfKX34uXmJbnXYLr/x3Hz2AgCdfR3/A7PkXFlygE9xgn0zABQ4to+WddSOTuhoySOE7zZ8+vo3AhZ6WUeP6x8Y6jlWyScJke8wGSf+CvYLEpvromq6dosRjFizj/3mQ89sXjhnxcp0n8Z1geWcbLsDhXmKTh687vs/2VAndh/BymyXcp/eJoIZYScu7AqT1Qcb6X7bwjXKJyXpt07tKBX3/kbwkKSc+q625FI54U0jFLip8sKcY+4vH4UpLCUDSOBwSHPEcTFaWKUKguOEYce1F5Z4BKwupSouK+D344Oigq4kPp4gtJCrGTReX7lxQV5c4RwjHcceeI47/rMPnt8Zu0CEIRBo/C/GQf/fQxXq/F0N0yTcJVEq3FL3OGq9UimgRpFC/Fq/tFkD7FybN4+q+74f2/b6T6J6+BkEuwnEoBblarWAhCPv8U/BXI092JPw+pOB4k0/VW/eYXnaeptFZD+WXxOJhMwvV6kITTeZAOJkLV4/Gfy/hlEU6FdRLHkzSaLITNw2OECOGFHq3m1atJuZjz2pQm8WY5DeV7kfjCqtrw5T8xPkuCaSTmDUy+RKN58sWJYvDmcfYoxh+Kq6Pi9Th4jhZykr8E8/g5KN+VWzDkNQAlQuBd5xGALEV/IR9rQHNdA9C803EmXtagdhz0hvfiLx0QE0wqlLy8vECIrJJ4upmkEhbfHsWZhKjCJEPwczSdLsIXIT2Jni2WP6wqJI8VDPkWGBKPDCcqhgqkXBw+4hLzYBq/ZB+xx5LPoFri1NWZgEkttYkWd4Cuh5bccJyHFkL6hRbX9eqax2MKdvDArWmeDiKJDfAVkUTOR5LjMDYa9QdJiKh6x+hXXBk7OGM2aEBrLGgkfnb0FEn+swdI3yarQZzMxLNwKV+uE/F3GqZBJM49zhCBXATxkRvl8/BRza2B21THIEgy1iN5j44UMH4aUmgTRknhykxxMwzg4CbmfFlwDP/48PVB0uSf6iQZDxxbYFSRkQoY6HxgjMTD1gTl6vxqcECO6wBK6wJ0UJXw6ugg7aPj4cuvNVSgA3bnCFQ4LlZoLLKwJ13whZrABkHYFE8onWykWJVuYGP4x+8AG9Yaw/FVNzkX7o+NDcoYmH1XwYaiNmgnsPH5AUDjsONzBDz88rdt4eG+w4Nhf0Br8DigOjoBj4fh8BPAx/4wyjGqg3EVG288xNYENrjPTJxih+pwSBew8TV8lGHYMPkrmsj4qfNZTPQ0SIMaYG7ksqAAgZPOw238dhvztfRoPKRiySbU1hMseRwyFHIyljxzvLddX+f3+9EJlukYtDgqWrCFA9wXtPgMn6B5EO8EafkybBYavqMaJWxhlEaj8fiOHesCF/4uY53zg4miSTgF2KA+H/AaoemEUSosjLRKizCtoYTYez0EuSpKLMyNkKc5gtZOhJU2HWElMGaCCHR/XNc1xVSujJb7YbOOcZUNVEGEWgRNxng8vr07SZEQYoqvXlmRcGXRz2VQseiawyNAtTB2BQby8TKxVjWqRi1c474AxGNgna/0fUtDQ9CA1xf6mI4XBJULN+EF8l7WghnKlnNGea6kdIMqJA2TyTxKxehGLuc5QAm51kQXaRhjbxtjuAklhL06AMrMmDKJxYHwoLp5Ki8JQAWDNp5/SVDdfZIqKSMyFVzyMSwpsDZ2CWtmQYt7Y81caM2EnTrkI8F3oKtrp4d7YNWs/SdMVWZMLZhxX2kPIwdpDwUR4ivQnoexuoqYcyBLfGhriVa5B31hPRwGW7ijJxp47ftEMvam5xk04ByRMut/iwKLRAN6W+SM9MR/lg4y4BKQn3A66IbLPBw1HZfVwiquhUvUO1goRgT5BCQ9GoiqA8P37VsRkO6fLRNVeNkuFzWZq4JKzbmFkIXH0zcIMceYzlayEuzWvWvUjTBukewGSWojVERNdkN5sOAdKpm2UZf+AFSyQEydoBqUz9VC/lmsxb1E4iymKmRY65mzjmPOnJULR2dT2Bp4nCbAw2HIn/l8sD9sh9hV0cJqaBlvslm8T2IxX9JuNQYfUtYGbuFjQXvPgw/CxK90jOIBXXHxGdGTE6+vhhh9SRE3EKp1NdWC363RlrhA++O6gPuaisiva37qEX5Q5Vo7cBuuFvH3ZykCNdJiiybH81Q00fPRNKICCB9PCrN0M42Bm/2h0rP2hPBrpMbgZbtGrVSHmH9RiN2Gj5vZLFrOpBrKy6EhpvIcu9/SeSj//zVYzjbBLMvJazjvW4vzMgtXvTd5MpzuA5jL8IAbUMXNIX+w+0Wby0tqVpU1WvSsKmbhavWisIj6eyoEqI+NiOhYwM8aF3rAj1ll2/UBF0qtiOd3r8Ts1Kge+skaKFpYj1ksK/ajMpECoDDyZjjwIQJsvY6gs19uEabpo1ohBK4dEHoceDy3BfCY/GtqrUE0/5pbxF76oUGwxk47xzlG8fNz5jcPl8s4zRTIWnN3dpQU7WMquEzd2cLBItzSl8w45pE9QX/iukBpGAwOMxbEXy1PDiaxNJAHR7R61rwU4jzY9C7xHytODTQ6HLmHYrrX2C4BZsBhW4joGXDcIjLSd4goK9CUd3BDDdXttecimtvLLZIUegcRDjCBlFiIgakiGD8rNytt0SEu8rGRlnvdYo42QZrXYxFk65/i2bNbC4Xb/BjUDvIP7rPrwz3oyjWp7pWVMGukYawizSJs17/yR3PJWqXPIIumhjQr12TkWiXO+f5zn4NlMAsvEKDh6noAtwjn9c8AAoBgqKuwh035v0bIdCoKbL1hjB4E9izCen1DDfJg5aQPaRQrd7vvUp11I6xHVSWeRVyvd6DwyT5QuC4G9bQd8be0jF97p1zL9fUswn19dMrrybxKri/mAwOEehEXtmYyehzZs9pruWfqhzsAWByqH+KSQ+GergWUs80gmtVMqi/l0XcAVR1xHGb0uyvV5B0sQ0DQLTclV11YVd3+0vDWMmXUdAuZ9/BhbV9emDpV+tcVD/a6F2L+GAbSlv0vWERTNUmiiXLbssB8C5j3yOCu7aocT0mVYFekP3p3qTK1ZV97qXA5HSZJJqB9c6JKMeuDtFeG4irxJpmU7+KFLk2DZBamYFCXdhNNpIqC9CYJnF6K7r2Horb2FzkwoRkqU8zdQ31X2rw3yo2U990bMzF/q52SKbpZBo/l253TJQZFgqEz5dFDdU3E4ZAz6/KjygZ7ZVKCVdu6snBhn/D6sg+qj81zWJsGpVSE47amAWnT8FDrexdJnmDoaOZkCi/vV1U8rzoO1SZQSCW1E1HxEQ/ycg/ycm4WTE28WNDyOsp9Xbxl91c7cZIOqAQ5FXWdAJMefAebSgG6oBLoYeH1zRz6ZO9c6uzvaorCPVVR2OuE/bLx3TeiE9j1dYKrdDOGPkeHWcIRPZPbqSVtgSXs8GS6cPPrXuCBm79BZrBDLKUWIG9CC2BHJ1pX0AL78q1VYqDbnitpAVymT52tBa6+P8ExSC8g0kUFgB2d1x6jAM696XeKorzp6Ru56Y9gtJe+6X2EgDuA3obpx45OOE+76RurkmnhzqfdvfN19npqgOB8LbBDLG/N9B9BYtvQArtzLjzfuD1AF7TAEesPFy+dbEEBcPPsdUEB+GcpgPNv+h2i6LTpP9SUfSj3NeaD1/zE+5pcyt7rxSJS9lx8CTyexi/LRRxM1/nnq3bJ/HH6SAkOAkId4k0+FJO1czEpmwWB+VUwiZazL7G49u0HVwE2O2qeDixy+nvKH7jHTPvSuNzknICJgbkV1L1seXh97tzLzx3an13c2txRDgNrRJm8Q02oOz2PtIV5RN2YR4/TPQ32uGc06F2eR5nL3fzm8FqvEcOM4r0z+kP2DHAZbByrb9/gGRiKsqGd551uak9BjN5upJGdnNWSawNiLLJy+4MYJRVO6UKCNcRwAxlrve2IJTbKXU72YIO+Y4O7oHpIyYEz9iOBvJ8bHNA2GvM1WUuk5WIbsPLeow9zhvbwGLVHn6EJluI5e61rGXOZvkJlDhTrV2Nt8B2L/O4+dYas82MFdSe3XivdqOvsjXdEzb5KrJvvBmkAmkVeeF82wVKJNRLAOdBnB7PDCq3NMiWb6rjDDp1W82bAkcV+EL3BEfNNgc2q9o29tc3Usj0hKmDs2BvCmoRpe0MY0LU/qPqDbx6Nlf7q2LDBiKnxKDf2vb2cKfwsJ13ZV6uJaICP/EMAwhb7RvQnGgDjjRSCyMMH1JOy3VEnGm2bIHV5ML0HIzGncIkCKWCCjTUM3PwdTAWY3ncPqO8eoBBxaNhMdg3CsFz/aKH4zDCVepZJZt2cjJlL0v3p4Xf5MileCmGtyyZBToYrGGaonv4i0focBpLUCxofpBWbz9f76yeqPrTOcwTWxcWW4Yv+DWpvz49vz/QyjyZz+XvlCeKNvGT8VF0Xfs//b2K5ojbZ9k1z1pN4FW4PDXLRnLoK5zSAKsWZKzv6lYk3gjzVraKpWwvMVyBYxxhSM3f5OZhL4jitHfs5CVbzz/FU6qi7fwA=
      
      
      
      
      List of all Java EE JSRs supported
      
      
      Supported in JBoss EAP 4.3 / 5 /6
      
      
      
      JSR 052: A Standard Tag Library for JavaServer Pages
      
      
      JSR 067: JavaTM APIs for XML Messaging...
    </summary>
    <content type="html">
      &lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      Language EN / Timereading 5 mn
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;div class=&quot;title&quot;&gt;This post presents, as a diagram, all Java EE standards supported in each JBoss EAP version :&lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;This diagram was updated in December 2013 (fixes and addition of (*) information)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Thanks to Arun Gupta for the fixes&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;The following data are based on official documentation from Oracle (JSR) and Red Hat (EAP).&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;pass::[more]&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can &lt;strong&gt;click on each component to access the Java Specification Requests (JSRs)&lt;/strong&gt; details or move to the complete lists.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;mxgraph&quot; style=&quot;position:relative;overflow:hidden;width:1212px;height:935px;&quot;&gt;&lt;div style=&quot;width:1px;height:1px;overflow:hidden;&quot;&gt;7V1tc+I4Ev41qbrbqqGsF0v2R4aEvZ3aqU1t5m72qwMOeJZgzphNZn/9Sn7DLYlXGeN4wlRlQAYbWo+7n251q2/I6Pn15yRYzT/H03Bxg53p6w25vcHYcxzxVw58VwZmSTTNh1AxsImm4RoMpXG8SKMVHJzEy2U4ScHYU7yAJ1sFs1AbeJgEC330azRN58WXw2w7/p8wms3LyyDm50fW6ffyHNPwKdgs0g/ZEM4PvzrFmfKX34uXmJbnXYLr/x3Hz2AgCdfR3/A7PkXFlygE9xgn0zABQ4to+WddSOTuhoySOE7zZ8+vo3AhZ6WUeP6x8Y6jlWyScJke8wGSf+CvYLEpvromq6dosRjFizj/3mQ89sXjhnxcp0n8Z1geWcbLsDhXmKTh687vs/2VAndh/BymyXcp/eJoIZYScu7AqT1Qcb6X7bwjXKJyXpt07tKBX3/kbwkKSc+q625FI54U0jFLip8sKcY+4vH4UpLCUDSOBwSHPEcTFaWKUKguOEYce1F5Z4BKwupSouK+D344Oigq4kPp4gtJCrGTReX7lxQV5c4RwjHcceeI47/rMPnt8Zu0CEIRBo/C/GQf/fQxXq/F0N0yTcJVEq3FL3OGq9UimgRpFC/Fq/tFkD7FybN4+q+74f2/b6T6J6+BkEuwnEoBblarWAhCPv8U/BXI092JPw+pOB4k0/VW/eYXnaeptFZD+WXxOJhMwvV6kITTeZAOJkLV4/Gfy/hlEU6FdRLHkzSaLITNw2OECOGFHq3m1atJuZjz2pQm8WY5DeV7kfjCqtrw5T8xPkuCaSTmDUy+RKN58sWJYvDmcfYoxh+Kq6Pi9Th4jhZykr8E8/g5KN+VWzDkNQAlQuBd5xGALEV/IR9rQHNdA9C803EmXtagdhz0hvfiLx0QE0wqlLy8vECIrJJ4upmkEhbfHsWZhKjCJEPwczSdLsIXIT2Jni2WP6wqJI8VDPkWGBKPDCcqhgqkXBw+4hLzYBq/ZB+xx5LPoFri1NWZgEkttYkWd4Cuh5bccJyHFkL6hRbX9eqax2MKdvDArWmeDiKJDfAVkUTOR5LjMDYa9QdJiKh6x+hXXBk7OGM2aEBrLGgkfnb0FEn+swdI3yarQZzMxLNwKV+uE/F3GqZBJM49zhCBXATxkRvl8/BRza2B21THIEgy1iN5j44UMH4aUmgTRknhykxxMwzg4CbmfFlwDP/48PVB0uSf6iQZDxxbYFSRkQoY6HxgjMTD1gTl6vxqcECO6wBK6wJ0UJXw6ugg7aPj4cuvNVSgA3bnCFQ4LlZoLLKwJ13whZrABkHYFE8onWykWJVuYGP4x+8AG9Yaw/FVNzkX7o+NDcoYmH1XwYaiNmgnsPH5AUDjsONzBDz88rdt4eG+w4Nhf0Br8DigOjoBj4fh8BPAx/4wyjGqg3EVG288xNYENrjPTJxih+pwSBew8TV8lGHYMPkrmsj4qfNZTPQ0SIMaYG7ksqAAgZPOw238dhvztfRoPKRiySbU1hMseRwyFHIyljxzvLddX+f3+9EJlukYtDgqWrCFA9wXtPgMn6B5EO8EafkybBYavqMaJWxhlEaj8fiOHesCF/4uY53zg4miSTgF2KA+H/AaoemEUSosjLRKizCtoYTYez0EuSpKLMyNkKc5gtZOhJU2HWElMGaCCHR/XNc1xVSujJb7YbOOcZUNVEGEWgRNxng8vr07SZEQYoqvXlmRcGXRz2VQseiawyNAtTB2BQby8TKxVjWqRi1c474AxGNgna/0fUtDQ9CA1xf6mI4XBJULN+EF8l7WghnKlnNGea6kdIMqJA2TyTxKxehGLuc5QAm51kQXaRhjbxtjuAklhL06AMrMmDKJxYHwoLp5Ki8JQAWDNp5/SVDdfZIqKSMyFVzyMSwpsDZ2CWtmQYt7Y81caM2EnTrkI8F3oKtrp4d7YNWs/SdMVWZMLZhxX2kPIwdpDwUR4ivQnoexuoqYcyBLfGhriVa5B31hPRwGW7ijJxp47ftEMvam5xk04ByRMut/iwKLRAN6W+SM9MR/lg4y4BKQn3A66IbLPBw1HZfVwiquhUvUO1goRgT5BCQ9GoiqA8P37VsRkO6fLRNVeNkuFzWZq4JKzbmFkIXH0zcIMceYzlayEuzWvWvUjTBukewGSWojVERNdkN5sOAdKpm2UZf+AFSyQEydoBqUz9VC/lmsxb1E4iymKmRY65mzjmPOnJULR2dT2Bp4nCbAw2HIn/l8sD9sh9hV0cJqaBlvslm8T2IxX9JuNQYfUtYGbuFjQXvPgw/CxK90jOIBXXHxGdGTE6+vhhh9SRE3EKp1NdWC363RlrhA++O6gPuaisiva37qEX5Q5Vo7cBuuFvH3ZykCNdJiiybH81Q00fPRNKICCB9PCrN0M42Bm/2h0rP2hPBrpMbgZbtGrVSHmH9RiN2Gj5vZLFrOpBrKy6EhpvIcu9/SeSj//zVYzjbBLMvJazjvW4vzMgtXvTd5MpzuA5jL8IAbUMXNIX+w+0Wby0tqVpU1WvSsKmbhavWisIj6eyoEqI+NiOhYwM8aF3rAj1ll2/UBF0qtiOd3r8Ts1Kge+skaKFpYj1ksK/ajMpECoDDyZjjwIQJsvY6gs19uEabpo1ohBK4dEHoceDy3BfCY/GtqrUE0/5pbxF76oUGwxk47xzlG8fNz5jcPl8s4zRTIWnN3dpQU7WMquEzd2cLBItzSl8w45pE9QX/iukBpGAwOMxbEXy1PDiaxNJAHR7R61rwU4jzY9C7xHytODTQ6HLmHYrrX2C4BZsBhW4joGXDcIjLSd4goK9CUd3BDDdXttecimtvLLZIUegcRDjCBlFiIgakiGD8rNytt0SEu8rGRlnvdYo42QZrXYxFk65/i2bNbC4Xb/BjUDvIP7rPrwz3oyjWp7pWVMGukYawizSJs17/yR3PJWqXPIIumhjQr12TkWiXO+f5zn4NlMAsvEKDh6noAtwjn9c8AAoBgqKuwh035v0bIdCoKbL1hjB4E9izCen1DDfJg5aQPaRQrd7vvUp11I6xHVSWeRVyvd6DwyT5QuC4G9bQd8be0jF97p1zL9fUswn19dMrrybxKri/mAwOEehEXtmYyehzZs9pruWfqhzsAWByqH+KSQ+GergWUs80gmtVMqi/l0XcAVR1xHGb0uyvV5B0sQ0DQLTclV11YVd3+0vDWMmXUdAuZ9/BhbV9emDpV+tcVD/a6F2L+GAbSlv0vWERTNUmiiXLbssB8C5j3yOCu7aocT0mVYFekP3p3qTK1ZV97qXA5HSZJJqB9c6JKMeuDtFeG4irxJpmU7+KFLk2DZBamYFCXdhNNpIqC9CYJnF6K7r2Horb2FzkwoRkqU8zdQ31X2rw3yo2U990bMzF/q52SKbpZBo/l253TJQZFgqEz5dFDdU3E4ZAz6/KjygZ7ZVKCVdu6snBhn/D6sg+qj81zWJsGpVSE47amAWnT8FDrexdJnmDoaOZkCi/vV1U8rzoO1SZQSCW1E1HxEQ/ycg/ycm4WTE28WNDyOsp9Xbxl91c7cZIOqAQ5FXWdAJMefAebSgG6oBLoYeH1zRz6ZO9c6uzvaorCPVVR2OuE/bLx3TeiE9j1dYKrdDOGPkeHWcIRPZPbqSVtgSXs8GS6cPPrXuCBm79BZrBDLKUWIG9CC2BHJ1pX0AL78q1VYqDbnitpAVymT52tBa6+P8ExSC8g0kUFgB2d1x6jAM696XeKorzp6Ru56Y9gtJe+6X2EgDuA3obpx45OOE+76RurkmnhzqfdvfN19npqgOB8LbBDLG/N9B9BYtvQArtzLjzfuD1AF7TAEesPFy+dbEEBcPPsdUEB+GcpgPNv+h2i6LTpP9SUfSj3NeaD1/zE+5pcyt7rxSJS9lx8CTyexi/LRRxM1/nnq3bJ/HH6SAkOAkId4k0+FJO1czEpmwWB+VUwiZazL7G49u0HVwE2O2qeDixy+nvKH7jHTPvSuNzknICJgbkV1L1seXh97tzLzx3an13c2txRDgNrRJm8Q02oOz2PtIV5RN2YR4/TPQ32uGc06F2eR5nL3fzm8FqvEcOM4r0z+kP2DHAZbByrb9/gGRiKsqGd551uak9BjN5upJGdnNWSawNiLLJy+4MYJRVO6UKCNcRwAxlrve2IJTbKXU72YIO+Y4O7oHpIyYEz9iOBvJ8bHNA2GvM1WUuk5WIbsPLeow9zhvbwGLVHn6EJluI5e61rGXOZvkJlDhTrV2Nt8B2L/O4+dYas82MFdSe3XivdqOvsjXdEzb5KrJvvBmkAmkVeeF82wVKJNRLAOdBnB7PDCq3NMiWb6rjDDp1W82bAkcV+EL3BEfNNgc2q9o29tc3Usj0hKmDs2BvCmoRpe0MY0LU/qPqDbx6Nlf7q2LDBiKnxKDf2vb2cKfwsJ13ZV6uJaICP/EMAwhb7RvQnGgDjjRSCyMMH1JOy3VEnGm2bIHV5ML0HIzGncIkCKWCCjTUM3PwdTAWY3ncPqO8eoBBxaNhMdg3CsFz/aKH4zDCVepZJZt2cjJlL0v3p4Xf5MileCmGtyyZBToYrGGaonv4i0focBpLUCxofpBWbz9f76yeqPrTOcwTWxcWW4Yv+DWpvz49vz/QyjyZz+XvlCeKNvGT8VF0Xfs//b2K5ojbZ9k1z1pN4FW4PDXLRnLoK5zSAKsWZKzv6lYk3gjzVraKpWwvMVyBYxxhSM3f5OZhL4jitHfs5CVbzz/FU6qi7fwA=&lt;/div&gt;&lt;/div&gt;
      &lt;script src=&quot;//drawdotio.appspot.com/embed.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;list-of-all-java-ee-jsrs-supported&quot;&gt;List of all Java EE JSRs supported&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;supported-in-jboss-eap-4-3-5-6&quot;&gt;Supported in JBoss EAP 4.3 / 5 /6&lt;/h3&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=052&quot;&gt;JSR 052: A Standard Tag Library for JavaServer Pages&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=067&quot;&gt;JSR 067: JavaTM APIs for XML Messaging 1.0&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=093&quot;&gt;JSR 093: JavaTM API for XML Registries 1.0 (JAXR)&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=101&quot;&gt;JSR 101: JavaTM APIs for XML based RPC&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=153&quot;&gt;JSR 153: Enterprise JavaBeansTM 2.1&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=181&quot;&gt;JSR 181: Web Services Metadata for the JavaTM Platform&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=220&quot;&gt;JSR 220: Enterprise JavaBeansTM 3.0&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=914&quot;&gt;JSR 914: JavaTM Message Service (JMS) API&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=919&quot;&gt;JSR 919: JavaMail&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;supported-in-jboss-eap-4-3&quot;&gt;Supported in JBoss EAP 4.3&lt;/h3&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=151&quot;&gt;JSR 151: JavaTM 2 Platform, Enterprise Edition 1.4 (J2EE 1.4) Specification&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=088&quot;&gt;JSR 88: JavaTM EE Application Deployment&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=109&quot;&gt;JSR 109: Implementing Enterprise Web Services&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=115&quot;&gt;JSR 115: JavaTM Authorization Contract for Containers&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=154&quot;&gt;JSR 154: JavaTM Servlet 2.4 Specification&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=224&quot;&gt;JSR 224: JavaTM API for XML-Based Web Services (JAX-WS) 2.0&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=907&quot;&gt;JSR 907: JavaTM Transaction API (JTA)&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;supported-in-jboss-eap-4-3-5-1&quot;&gt;Supported in JBoss EAP 4.3 / 5.1&lt;/h3&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=077&quot;&gt;JSR 077: J2EETM Management&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=112&quot;&gt;JSR 112: J2EETM Connector Architecture 1.5&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=220&quot;&gt;JSR 220: Enterprise JavaBeansTM 3.0&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=222&quot;&gt;JSR 222: JavaTM Architecture for XML Binding (JAXB) 2.0&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=245&quot;&gt;JSR 245: JavaServerTM Pages 2.1&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=250&quot;&gt;JSR 250: Common Annotations for the JavaTM Platform&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=252&quot;&gt;JSR 252: JavaServer Faces 1.2&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;supported-in-jboss-eap-5-1&quot;&gt;Supported in JBoss EAP 5.1&lt;/h3&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=244&quot;&gt;JSR 244: JavaTM Platform, Enterprise Edition 5 (Java EE 5) Specification&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=109&quot;&gt;JSR 109: Implementing Enterprise Web Services&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=115&quot;&gt;JSR 115: JavaTM Authorization Contract for Containers&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=154&quot;&gt;JSR 154: JavaTM Servlet 2.4 Specification&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=224&quot;&gt;JSR 224: JavaTM API for XML-Based Web Services (JAX-WS) 2.0&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=311&quot;&gt;JSR 311: JAX-RS: The JavaTM API for RESTful Web Services&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;supported-in-jboss-eap-5-1-6&quot;&gt;Supported in JBoss EAP 5.1 / 6&lt;/h3&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=045&quot;&gt;JSR 045: Debugging Support for Other Languages&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=088&quot;&gt;JSR 088: JavaTM EE Application Deployment&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=907&quot;&gt;JSR 907: JavaTM Transaction API (JTA)&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;supported-in-jboss-eap-6&quot;&gt;Supported in JBoss EAP 6&lt;/h3&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=316&quot;&gt;JSR 316: JavaTM Platform, Enterprise Edition 6 (Java EE 6) Specification&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=077&quot;&gt;JSR 077: J2EETM Management&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=109&quot;&gt;JSR 109: Implementing Enterprise Web Services&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=115&quot;&gt;JSR 115: JavaTM Authorization Contract for Containers&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=222&quot;&gt;JSR 222: JavaTM Architecture for XML Binding (JAXB) 2.0&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=224&quot;&gt;JSR 224: JavaTM API for XML-Based Web Services (JAX-WS) 2.0&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=245&quot;&gt;JSR 245: JavaServerTM Pages 2.1&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=250&quot;&gt;JSR 250: Common Annotations for the JavaTM Platform&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=299&quot;&gt;JSR 299: Contexts and Dependency Injection for the JavaTM EE platform&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=303&quot;&gt;JSR 303: Bean Validation&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=311&quot;&gt;JSR 311: JAX-RS: The JavaTM API for RESTful Web Services&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=314&quot;&gt;JSR 314: JavaServer Faces 2.0&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=315&quot;&gt;JSR 315: JavaTM Servlet 3.0 Specification&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=317&quot;&gt;JSR 317: JavaTM Persistence 2.0&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://jcp.org/en/jsr/detail?id=322&quot;&gt;JSR 322: JavaTM EE Connector Architecture 1.6&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://mgreau.github.io/posts/2012/07/30/corriger-les-proprietes-des-revisions-SVN.html</id>
    <title>Subversion - corriger les propriétés d&#8217;une révision SVN</title>
    <updated>2013-10-21T00:13:49+02:00</updated>
    <published>2012-07-30T00:00:00+00:00</published>
    <link href="http://mgreau.github.io/posts/2012/07/30/corriger-les-proprietes-des-revisions-SVN.html" rel="alternate" type="text/html" />
    <author>
      <name>Maxime Gréau</name>
    </author>
    <category term="svn"></category>
    <category term="shell"></category>
    <summary>
      
      
      
      
      
      
      
      
      
      Language : FR / Temps de lecture : 10mn
      
      
      
      
      
      
      
      
      
      
      
      Ce post explique comment mettre à jour les propriétés SVN d&#8217;une révision donnée d&#8217;un repository. Et notamment la propriété svn:date qui, lorsqu&#8217;elle est absente sur certaines révisions, bloque les checkout via le client SVNKit (utilisé par défaut dans le plugin Subversion de Jenkins CI).
      
      
      
      
      
      pass::[more]
      
      
      Suite à des traitements d&#8217;administration sur des référentiels Apache Subversion 1.6, les jobs Jenkins CI ne parviennent plus à récupérer les sources d&#8217;un référentiel.
      
      
      
      
      Les symptômes du problème
      
      
      
      
      les jobs Jenkins ne parviennent plus à faire des "checkout" sur un repository
      
      
      toutes les commandes SVN fonctionnent sur ce même repository via le...
    </summary>
    <content type="html">
      &lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;admonitionblock tip&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      Language : FR / Temps de lecture : 10mn
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      Ce post explique comment &lt;strong&gt;mettre à jour les propriétés SVN d’une révision donnée&lt;/strong&gt; d’un repository. Et notamment la propriété svn:date qui, lorsqu’elle est absente sur certaines révisions, bloque les checkout via le client &lt;a href=&quot;http://svnkit.com/&quot;&gt;SVNKit&lt;/a&gt; (utilisé par défaut dans le &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Subversion+Plugin&quot;&gt;plugin Subversion de Jenkins CI)&lt;/a&gt;.
      &lt;/td&gt;
      &lt;/tr&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;pass::[more]&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Suite à des traitements d’administration sur des référentiels Apache Subversion 1.6, les jobs Jenkins CI ne parviennent plus à récupérer les sources d’un référentiel.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;les-sympt-mes-du-probl-me&quot;&gt;Les symptômes du problème&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;les jobs Jenkins ne parviennent plus à faire des &quot;checkout&quot; sur un repository&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;toutes les commandes SVN fonctionnent sur ce même repository via le plugin Eclipse (Subclipse - JavaHL)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;ces mêmes commandes fonctionnent également en direct sur le serveur SVN&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;le message d’erreur dans la console Jenkins est le suivant :&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;Building in workspace /.../continuous-integration/jobs/mon-projet/workspace
      Checking out a fresh workspace because there's no workspace at
      /.../continuous-integration/jobs/mon-projet/workspace
      
      Cleaning local Directory .
      Checking out http://serveur/svn/repo1/mon-projet/trunk
      ERROR: Failed to check out http://serveur/svn/repo1/mon-projet/trunk
      
      org.tmatesoft.svn.core.SVNException: svn: E175002: REPORT of '/svn/repo1/!svn/vcc/default': 500 Internal Server Error (http://serveur)
       at org.tmatesoft.svn.core.internal.wc.SVNErrorManager.error(SVNErrorManager.java:64)
       ...
       Caused by: svn: E175002: REPORT of '/svn/repo1/!svn/vcc/default': 500 Internal Server Error (http://serveur)
       at org.tmatesoft.svn.core.SVNErrorMessage.create(SVNErrorMessage.java:208)
       at org.tmatesoft.svn.core.SVNErrorMessage.create(SVNErrorMessage.java:189)
       ...
       at org.tmatesoft.svn.core.internal.io.dav.DAVRepository.getDatedRevision(DAVRepository.java:200)
       ... 30 more
      FATAL: null
      java.lang.NullPointerException&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;L’accès à SVN est réalisé avec le &lt;a href=&quot;http://httpd.apache.org/docs/2.2/mod/mod_dav.html&quot;&gt;module DAV&lt;/a&gt;, après une recherche dans les logs d’Apache, le message réel du serveur SVN est le suivant :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;Fri Jul 27 10:04:45 2012] [error] [client ] Could not access revision times. &amp;amp;nbsp;[500, #0]&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Le problème se confirme lors de l’exécution des 2 commandes suivantes qui devraient affichées les logs des commit :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Accès aux sources via le système de fichiers&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;svn log --xml -v -r {2008-12-01T00:00:00Z}:{2012-&amp;lt;wbr&amp;gt;&amp;lt;/wbr&amp;gt;07-13T15:00:00Z} file:///svn/repos/repo1
      
      &amp;amp;lt;?xml version=&quot;1.0&quot;?&amp;amp;gt;
      &amp;amp;lt;log&amp;amp;gt;
      svn: Failed to find time on revision 38307&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Accès aux sources via le protocole HTTP&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;svn log --xml -v -r {2008-12-01T00:00:00Z}:{2012-&amp;lt;wbr&amp;gt;&amp;lt;/wbr&amp;gt;07-13T15:00:00Z} http://serveur/svn/
      
      svn: Server sent unexpected return value (500 Internal Server Error) in response to
      REPORT request for '/svn/repo1/!svn/vcc/&amp;lt;wbr&amp;gt;&amp;lt;/wbr&amp;gt;default'&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;L’aperçu des informations sur les révisions SVN dans l’IDE Eclipse confirme également le problème :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;img-svnide&quot; class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://mgreau.github.io/images/posts/blog_eclipse_svn_logs1.png&quot; alt=&quot;Révisions SVN dans IDE Eclipse&quot;&gt;
      &lt;/div&gt;
      &lt;div class=&quot;title&quot;&gt;Figure 1. Révisions SVN dans IDE Eclipse&lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;La solution consiste à ajouter une date sur &lt;strong&gt;les révisions en question.&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Pour cela, il faut commencer par &lt;strong&gt;autoriser la modification des propriétés&lt;/strong&gt; sur le référentiel SVN puis par exécuter &lt;strong&gt;la commande &lt;em&gt;svn propset&lt;/em&gt;&lt;/strong&gt; sur la révision concernée.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;autoriser-la-modification-des-propri-t-s-svn&quot;&gt;Autoriser la modification des propriétés SVN&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Par défaut Apache Subversion définit un &lt;a href=&quot;http://svnbook.red-bean.com/en/1.6/svn-book.html#svn.ref.reposhooks.pre-revprop-change&quot;&gt;hook (pre-revprop-change)&lt;/a&gt; sur chaque référentiel SVN qui bloque la modification des propriétés SVN (hormis la propriété svn:log). il faut donc désactiver temporairement ce hook (faire une copie de sauvegarde avant)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;echo '#!/bin/sh'&amp;amp;nbsp; &amp;amp;gt; repos/repo1/hooks/pre-revprop-change
      echo 'exit 0'&amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;gt;&amp;amp;gt; repos/repo1/hooks/pre-revprop-change
      chmod 755 repos/repo1/hooks/pre-revprop-change&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;executer-la-commande-svn-pour-valoriser-les-propri-t-s-d-une-r-vision&quot;&gt;Executer la commande SVN pour valoriser les propriétés d’une révision&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Il est donc possible d'éxécuter le commande SVN pour valoriser la propriété svn:date&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;svn propset -r38307  --revprop svn:date '2011-09-21T19:55:44.000220Z' file:///svn/repos/repo1
      property 'svn:date' set on repository revision 38307&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;On en profite également pour mettre à jour l’auteur du commit (svn:author) ainsi que le commentaire (svn:log) associé :&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;svn propset -r 38307 --revprop svn:author 'mgreau' file:///svn/repos/repo1
      property 'svn:author' set on repository revision 38307&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;svn propset -r38307  --revprop svn:log 'Correction pb date de révision' file:///svn/repos/repo1
      property 'svn:log' set on repository revision 38307&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;aper-u-du-r-sultat-dans-l-ide-eclipse&quot;&gt;Aperçu du résultat dans l’IDE Eclipse&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;En rafraichissant la vue &lt;em&gt;History&lt;/em&gt; dans Eclipse, on s’aperçoit que la révision 38307 contient désormais des informations pour la date, l’auteur et le commentaire de commit.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div id=&quot;img-svnide2&quot; class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img src=&quot;http://mgreau.github.io/images/posts/blog_eclipse_svn_logs2.png&quot; alt=&quot;Révisions SVN OK dans IDE Eclipse&quot;&gt;
      &lt;/div&gt;
      &lt;div class=&quot;title&quot;&gt;Figure 2. Révisions SVN OK dans IDE Eclipse&lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;script-de-mise-jour-automatique&quot;&gt;Script de mise à jour automatique&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;L’impression écran précédente met en valeur le fait que plusieurs révisions sont impactées par ce problème sur les propriétés SVN.
      Je met à disposition &lt;a href=&quot;https://docs.google.com/open?id=0Bx7rkna8etApWHJsbEJWY0hhdnM&quot;&gt;un script shell (svn-propset.sh)&lt;/a&gt; qui valorise ces propriétés SVN (date, auteur, commentaire) avec les valeurs passées en paramètres du script, pour un intervalle donné de révisions.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;Exemple d’utilisation du script :&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;CodeRay&quot;&gt;&lt;code class=&quot;text language-text&quot;&gt;./svn-propset.sh -X -a mgreau -f 38215 -t 38321 -l &quot;Correction pb date de révision&quot;
       -d 2011-09-21T19:55:44.000220Z -u file:///svn/repos/repo1&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Pour d’autres informations vous pouvez consulter les posts (en anglais) qui m’ont permis de résoudre ce problème:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://docs.codehaus.org/display/HAUSMATES/Could+not+access+revision+times&quot;&gt;http://docs.codehaus.org/display/HAUSMATES/Could+not+&amp;lt;wbr&amp;gt;&amp;lt;/wbr&amp;gt;access+revision+times&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://blog.kymera-it.com/2011/02/changing-subversion-revision-times.html&quot;&gt;http://blog.kymera-it.com/2011/02/changing-subversion-&amp;lt;wbr&amp;gt;&amp;lt;/wbr&amp;gt;revision-times.html&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
</feed>
